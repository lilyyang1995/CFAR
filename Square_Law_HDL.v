// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SimulinkCFARHDLWorkflowExampleNew\Square_Law_HDL.v
// Created: 2023-05-30 11:15:57
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Square_Law_HDL
// Source Path: SimulinkCFARHDLWorkflowExampleNew/CFAR Implementation Model/Square Law HDL
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Square_Law_HDL
          (clk,
           reset,
           enb,
           In,
           SQR_LAW);


  input   clk;
  input   reset;
  input   enb;
  input   signed [33:0] In;  // sfix34_En12
  output  signed [33:0] SQR_LAW;  // sfix34_En12


  wire signed [33:0] Complex_to_Real_Imag_out1;  // sfix34_En12
  wire signed [33:0] Complex_to_Real_Imag_out2;  // sfix34_En12
  reg signed [33:0] reduced_reg [0:1];  // sfix34 [2]
  wire signed [33:0] reduced_reg_next [0:1];  // sfix34_En12 [2]
  wire signed [33:0] Complex_to_Real_Imag_out1_1;  // sfix34_En12
  wire signed [67:0] a_a_mul_temp;  // sfix68_En24
  wire signed [33:0] a_a_out1;  // sfix34_En12
  reg signed [33:0] Delay7_reg [0:1];  // sfix34 [2]
  wire signed [33:0] Delay7_reg_next [0:1];  // sfix34_En12 [2]
  wire signed [33:0] Delay7_out1;  // sfix34_En12
  reg signed [33:0] reduced_reg_1 [0:1];  // sfix34 [2]
  wire signed [33:0] reduced_reg_next_1 [0:1];  // sfix34_En12 [2]
  wire signed [33:0] Complex_to_Real_Imag_out2_1;  // sfix34_En12
  wire signed [67:0] a_a1_mul_temp;  // sfix68_En24
  wire signed [33:0] a_a1_out1;  // sfix34_En12
  reg signed [33:0] Delay8_reg [0:1];  // sfix34 [2]
  wire signed [33:0] Delay8_reg_next [0:1];  // sfix34_En12 [2]
  wire signed [33:0] Delay8_out1;  // sfix34_En12
  wire signed [33:0] a_a_b_b_out1;  // sfix34_En12
  reg signed [33:0] Delay_reg [0:1];  // sfix34 [2]
  wire signed [33:0] Delay_reg_next [0:1];  // sfix34_En12 [2]
  wire signed [33:0] Delay_out1;  // sfix34_En12


  assign Complex_to_Real_Imag_out1 = In;
  assign Complex_to_Real_Imag_out2 = 34'sh000000000;



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 34'sh000000000;
        reduced_reg[1] <= 34'sh000000000;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
        end
      end
    end

  assign Complex_to_Real_Imag_out1_1 = reduced_reg[1];
  assign reduced_reg_next[0] = Complex_to_Real_Imag_out1;
  assign reduced_reg_next[1] = reduced_reg[0];



  assign a_a_mul_temp = Complex_to_Real_Imag_out1_1 * Complex_to_Real_Imag_out1_1;
  assign a_a_out1 = a_a_mul_temp[45:12];



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_reg[0] <= 34'sh000000000;
        Delay7_reg[1] <= 34'sh000000000;
      end
      else begin
        if (enb) begin
          Delay7_reg[0] <= Delay7_reg_next[0];
          Delay7_reg[1] <= Delay7_reg_next[1];
        end
      end
    end

  assign Delay7_out1 = Delay7_reg[1];
  assign Delay7_reg_next[0] = a_a_out1;
  assign Delay7_reg_next[1] = Delay7_reg[0];



  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg_1[0] <= 34'sh000000000;
        reduced_reg_1[1] <= 34'sh000000000;
      end
      else begin
        if (enb) begin
          reduced_reg_1[0] <= reduced_reg_next_1[0];
          reduced_reg_1[1] <= reduced_reg_next_1[1];
        end
      end
    end

  assign Complex_to_Real_Imag_out2_1 = reduced_reg_1[1];
  assign reduced_reg_next_1[0] = Complex_to_Real_Imag_out2;
  assign reduced_reg_next_1[1] = reduced_reg_1[0];



  assign a_a1_mul_temp = Complex_to_Real_Imag_out2_1 * Complex_to_Real_Imag_out2_1;
  assign a_a1_out1 = a_a1_mul_temp[45:12];



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_reg[0] <= 34'sh000000000;
        Delay8_reg[1] <= 34'sh000000000;
      end
      else begin
        if (enb) begin
          Delay8_reg[0] <= Delay8_reg_next[0];
          Delay8_reg[1] <= Delay8_reg_next[1];
        end
      end
    end

  assign Delay8_out1 = Delay8_reg[1];
  assign Delay8_reg_next[0] = a_a1_out1;
  assign Delay8_reg_next[1] = Delay8_reg[0];



  assign a_a_b_b_out1 = Delay7_out1 + Delay8_out1;



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 34'sh000000000;
        Delay_reg[1] <= 34'sh000000000;
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
        end
      end
    end

  assign Delay_out1 = Delay_reg[1];
  assign Delay_reg_next[0] = a_a_b_b_out1;
  assign Delay_reg_next[1] = Delay_reg[0];



  assign SQR_LAW = Delay_out1;

endmodule  // Square_Law_HDL

