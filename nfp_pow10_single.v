// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SimulinkCFARHDLWorkflowExampleNew\nfp_pow10_single.v
// Created: 2023-05-30 17:04:46
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: nfp_pow10_single
// Source Path: SimulinkCFARHDLWorkflowExampleNew/CFAR Implementation Model/Alpha HDL/nfp_pow10_single
// Hierarchy Level: 2
// 
// {Latency Strategy = "Zero", Denormal Handling = "off"}
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module nfp_pow10_single
          (nfp_in,
           nfp_out);


  input   [31:0] nfp_in;  // ufix32
  output  [31:0] nfp_out;  // ufix32


  wire aSign;  // ufix1
  wire [7:0] aExponent;  // ufix8
  wire [22:0] aMantissa;  // ufix23
  wire aExponent_cfType_Exponent_I_out1;  // ufix1
  wire C3_out1;  // ufix1
  wire Compare_To_Zero_out1;  // ufix1
  wire [22:0] Constant_out1;  // ufix23
  wire [22:0] Switch_out1;  // ufix23
  wire aMantissa_0_out1;  // ufix1
  wire alphaaMantissa_0_aSign_out1;  // ufix1
  wire C2_out1;  // ufix1
  wire if_aMantissa_0_aSign_2_out1;  // ufix1
  wire if_aExponent_cfType_Exponent_2_out1;  // ufix1
  wire signed [10:0] C1_out1;  // sfix11
  wire signed [10:0] C_out1;  // sfix11
  wire signed [10:0] if_aSign_out1;  // sfix11
  wire [2:0] alpha0_out1;  // ufix3
  wire Exponent_0_out1;  // ufix1
  wire alpha1_out1;  // ufix1
  wire [23:0] Bit_Concat1_out1;  // ufix24
  wire alpha0_out1_1;  // ufix1
  wire [23:0] Bit_Concat_out1;  // ufix24
  wire [23:0] if_Exponent_0_cfType_Exp_out1;  // ufix24
  wire [23:0] reinterpretcast_mant_cor_nume_out1;  // ufix24_En23
  wire [32:0] alpha1_66096404753625392914_out1;  // ufix33_En31
  wire [56:0] tmp1_1_66096404753625392914_mul_temp;  // ufix57_En54
  wire [32:0] tmp1_1_66096404753625392914_out1;  // ufix33_En31
  wire BitSlice_out1;  // ufix1
  wire [7:0] C_out1_1;  // ufix8
  wire [7:0] if_Exponent_0_out1;  // ufix8
  wire [7:0] C1_out1_1;  // ufix8
  wire [8:0] exp_cor_1_add_temp;  // ufix9
  wire [8:0] exp_cor_1_1;  // ufix9
  wire [8:0] exp_cor_1_2;  // ufix9
  wire [7:0] exp_cor_1_out1;  // ufix8
  wire [7:0] C_out1_2;  // ufix8
  wire [8:0] exp_cor_2_add_temp;  // ufix9
  wire [8:0] exp_cor_2_1;  // ufix9
  wire [8:0] exp_cor_2_2;  // ufix9
  wire [7:0] exp_cor_2_out1;  // ufix8
  wire [7:0] if_bitget_tmp2_tmp2_WordLength_out1;  // ufix8
  wire [10:0] Bit_Concat_out1_1;  // ufix11
  wire signed [10:0] reinterpretcast_bitconcat_fi_0_out1;  // sfix11
  wire exp_tmp_upperBound_relop1;
  wire [7:0] C1_out1_2;  // ufix8
  wire [7:0] C_out1_3;  // ufix8
  wire [7:0] if_aSign_out1_1;  // ufix8
  wire alpha0_out1_2;  // ufix1
  wire signed [9:0] alpha127_out1;  // sfix10
  wire alpha1_out1_1;  // ufix1
  wire [39:0] C4_out1;  // ufix40_En31
  wire signed [10:0] cast_cfType_ExponentBias_lik_out1;  // sfix11
  wire signed [11:0] exp_tmp_cast_cfType_Exponent_1;  // sfix12
  wire signed [11:0] exp_tmp_cast_cfType_Exponent_2;  // sfix12
  wire signed [11:0] exp_tmp_cast_cfType_Exponent_out1;  // sfix12
  wire signed [10:0] DTC_out1;  // sfix11
  wire BitSlice_out1_1;  // ufix1
  wire [7:0] alpha3_out1;  // ufix8
  wire [31:0] BitSlice2_out1;  // ufix32
  wire [31:0] reinterpretcast_bitsliceget_t_out1;  // ufix32_En31
  wire [31:0] BitSlice1_out1;  // ufix32
  wire [31:0] reinterpretcast_bitsliceget_t_out1_1;  // ufix32_En31
  wire [31:0] if_bitget_tmp2_tmp2_WordLength_1_out1;  // ufix32_En31
  wire [39:0] Bit_Concat3_out1;  // ufix40
  wire [39:0] reinterpretcast_bitconcat_fi_0_out1_1;  // ufix40_En31
  wire [4:0] DTC2_out1;  // ufix5
  wire [7:0] dynamic_shift_cast;  // uint8
  wire [39:0] bitsll_tmp1_shift_length_out1;  // ufix40_En31
  wire [7:0] cast_cfType_ExponentBias_lik_out1_1;  // ufix8
  wire signed [11:0] cast_cfType_ExponentBias_lik_sub_temp;  // sfix12
  wire signed [11:0] cast_cfType_ExponentBias_lik_3;  // sfix12
  wire signed [11:0] cast_cfType_ExponentBias_lik_4;  // sfix12
  wire [8:0] cast_cfType_ExponentBias_lik_out1_2;  // ufix9
  wire [4:0] DTC1_out1;  // ufix5
  wire [7:0] dynamic_shift_cast_1;  // uint8
  wire [39:0] Shift_Arithmetic_out1;  // ufix40_En31
  wire [39:0] if_shift_sign_out1;  // ufix40_En31
  wire [39:0] if_exp_tmp_upperBound_1_out1;  // ufix40_En31
  wire [8:0] BitSlice2_out1_1;  // ufix9
  wire [9:0] Bit_Concat1_out1_1;  // ufix10
  wire signed [9:0] reinterpretcast_bitconcat_fi_0_out1_2;  // sfix10
  wire signed [9:0] alpha127_exp_tmp_out1;  // sfix10
  wire [31:0] cast_1_like_mant_frac_out1;  // ufix32_En31
  wire alpha0_out1_3;  // ufix1
  wire [30:0] BitSlice_out1_2;  // ufix31
  wire [31:0] Bit_Concat_out1_2;  // ufix32
  wire [31:0] reinterpretcast_bitconcat_fi_0_out1_3;  // ufix32_En31
  wire [31:0] cast_1_like_mant_frac_m_out1;  // ufix32_En31
  wire BitSlice1_out1_1;  // ufix1
  wire Logical_Operator_out1;  // ufix1
  wire signed [9:0] C1_out1_3;  // sfix10
  wire signed [9:0] exp_adj_exp_tmp_out1;  // sfix10
  wire signed [9:0] C_out1_4;  // sfix10
  wire signed [9:0] exp_adj_exp_tmp1_out1;  // sfix10
  wire signed [9:0] if_sticky_out1;  // sfix10
  wire signed [9:0] if_aSign_1_out1;  // sfix10
  wire exp_out_0_out1;  // ufix1
  wire [23:0] C2_out1_1;  // ufix24
  wire Logical_Operator1_out1;  // ufix1
  wire [31:0] if_sticky_1_out1;  // ufix32_En31
  wire Constant_out1_1;  // ufix1
  wire [32:0] Bit_Concat_out1_3;  // ufix33
  wire signed [32:0] Data_Type_Conversion_out1;  // sfix33_En31
  wire BitSlice_out1_3;  // ufix1
  wire signed [32:0] Log2Table_1_out1;  // sfix33_En31
  wire signed [32:0] w_Log2Table_1_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1;  // sfix33_En31
  wire BitSlice1_out1_2;  // ufix1
  wire BitSlice_out1_4;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1;  // ufix1
  wire signed [32:0] Log2Table_int32_2_out1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_2_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_1_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_1;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1_1;  // sfix33_En31
  wire BitSlice1_out1_3;  // ufix1
  wire BitSlice_out1_5;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_1;  // ufix1
  wire signed [32:0] Log2Table_int32_3_out1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_3_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1_1;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_2;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1_2;  // sfix33_En31
  wire BitSlice1_out1_4;  // ufix1
  wire BitSlice_out1_6;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_2;  // ufix1
  wire signed [32:0] Log2Table_int32_4_out1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_4_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1_2;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_out1_1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_3;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1_3;  // sfix33_En31
  wire BitSlice1_out1_5;  // ufix1
  wire BitSlice_out1_7;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_3;  // ufix1
  wire signed [32:0] Log2Table_int32_5_out1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_5_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1_3;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_out1_2;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_4;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1_4;  // sfix33_En31
  wire BitSlice1_out1_6;  // ufix1
  wire BitSlice_out1_8;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_4;  // ufix1
  wire signed [32:0] Log2Table_int32_6_out1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_6_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1_4;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_out1_3;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_5;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1_5;  // sfix33_En31
  wire BitSlice1_out1_7;  // ufix1
  wire BitSlice_out1_9;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_5;  // ufix1
  wire signed [32:0] Log2Table_int32_7_out1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_7_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1_5;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_out1_4;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_6;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1_6;  // sfix33_En31
  wire BitSlice1_out1_8;  // ufix1
  wire BitSlice_out1_10;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_6;  // ufix1
  wire signed [32:0] Log2Table_int32_8_out1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_8_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1_6;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_out1_5;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_7;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1_7;  // sfix33_En31
  wire BitSlice1_out1_9;  // ufix1
  wire BitSlice_out1_11;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_7;  // ufix1
  wire signed [32:0] Log2Table_int32_9_out1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_9_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1_7;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_out1_6;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_8;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1_8;  // sfix33_En31
  wire BitSlice1_out1_10;  // ufix1
  wire BitSlice_out1_12;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_8;  // ufix1
  wire signed [32:0] Log2Table_int32_10_out1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_10_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1_8;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_out1_7;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_9;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1_9;  // sfix33_En31
  wire BitSlice1_out1_11;  // ufix1
  wire BitSlice_out1_13;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_9;  // ufix1
  wire signed [32:0] Log2Table_int32_11_out1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_11_out1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1_9;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_out1_8;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_10;  // sfix33_En31
  wire signed [32:0] bitsll_w_1_out1_10;  // sfix33_En31
  wire BitSlice1_out1_12;  // ufix1
  wire BitSlice_out1_14;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_10;  // ufix1
  wire signed [3:0] C1_out1_4;  // sfix4_En1
  wire signed [3:0] C_out1_5;  // sfix4_En1
  wire signed [3:0] if_bitget_w_w_WordLength_1_1_out1;  // sfix4_En1
  wire [1:0] Constant_out1_2;  // ufix2
  wire [5:0] Bit_Concat_out1_4;  // ufix6
  wire signed [5:0] dtc1_out1_1;  // sfix6_En3
  wire signed [5:0] bitsrl_y_int32_2_out1;  // sfix6_En3
  wire signed [5:0] y_tmp1_out1;  // sfix6_En3
  wire signed [5:0] y_tmp1_out1_1;  // sfix6_En3
  wire signed [5:0] if_bitget_w_w_WordLength_0_1_out1;  // sfix6_En3
  wire signed [5:0] if_bitget_w_w_WordLength_1_1_out1_1;  // sfix6_En3
  wire [2:0] Constant_out1_3;  // ufix3
  wire [8:0] Bit_Concat_out1_5;  // ufix9
  wire signed [8:0] dtc1_out1_2;  // sfix9_En6
  wire signed [8:0] bitsrl_y_int32_2_out1_1;  // sfix9_En6
  wire signed [8:0] y_tmp1_out1_2;  // sfix9_En6
  wire signed [8:0] y_tmp1_out1_3;  // sfix9_En6
  wire signed [8:0] if_bitget_w_w_WordLength_0_1_out1_1;  // sfix9_En6
  wire signed [8:0] if_bitget_w_w_WordLength_1_1_out1_2;  // sfix9_En6
  wire [3:0] Constant_out1_4;  // ufix4
  wire [12:0] Bit_Concat_out1_6;  // ufix13
  wire signed [12:0] dtc1_out1_3;  // sfix13_En10
  wire signed [12:0] bitsrl_y_int32_2_out1_2;  // sfix13_En10
  wire signed [12:0] y_tmp1_out1_4;  // sfix13_En10
  wire signed [12:0] y_tmp1_out1_5;  // sfix13_En10
  wire signed [12:0] if_bitget_w_w_WordLength_0_1_out1_2;  // sfix13_En10
  wire signed [12:0] if_bitget_w_w_WordLength_1_1_out1_3;  // sfix13_En10
  wire [4:0] Constant_out1_5;  // ufix5
  wire [17:0] Bit_Concat_out1_7;  // ufix18
  wire signed [17:0] dtc1_out1_4;  // sfix18_En15
  wire signed [17:0] bitsrl_y_int32_2_out1_3;  // sfix18_En15
  wire signed [17:0] y_tmp1_out1_6;  // sfix18_En15
  wire signed [17:0] y_tmp1_out1_7;  // sfix18_En15
  wire signed [17:0] if_bitget_w_w_WordLength_0_1_out1_3;  // sfix18_En15
  wire signed [17:0] if_bitget_w_w_WordLength_1_1_out1_4;  // sfix18_En15
  wire [5:0] Constant_out1_6;  // ufix6
  wire [23:0] Bit_Concat_out1_8;  // ufix24
  wire signed [23:0] dtc1_out1_5;  // sfix24_En21
  wire signed [23:0] bitsrl_y_int32_2_out1_4;  // sfix24_En21
  wire signed [23:0] y_tmp1_out1_8;  // sfix24_En21
  wire signed [23:0] y_tmp1_out1_9;  // sfix24_En21
  wire signed [23:0] if_bitget_w_w_WordLength_0_1_out1_4;  // sfix24_En21
  wire signed [23:0] if_bitget_w_w_WordLength_1_1_out1_5;  // sfix24_En21
  wire [6:0] Constant_out1_7;  // ufix7
  wire [30:0] Bit_Concat_out1_9;  // ufix31
  wire signed [30:0] dtc1_out1_6;  // sfix31_En28
  wire signed [30:0] bitsrl_y_int32_2_out1_5;  // sfix31_En28
  wire signed [30:0] y_tmp1_out1_10;  // sfix31_En28
  wire signed [30:0] y_tmp1_out1_11;  // sfix31_En28
  wire signed [30:0] if_bitget_w_w_WordLength_0_1_out1_5;  // sfix31_En28
  wire signed [30:0] if_bitget_w_w_WordLength_1_1_out1_6;  // sfix31_En28
  wire [2:0] Constant_out1_8;  // ufix3
  wire [33:0] Bit_Concat_out1_10;  // ufix34
  wire signed [33:0] dtc1_out1_7;  // sfix34_En31
  wire signed [33:0] bitsrl_y_int32_2_out1_6;  // sfix34_En31
  wire signed [33:0] y_tmp1_out1_12;  // sfix34_En31
  wire signed [33:0] y_tmp1_out1_13;  // sfix34_En31
  wire signed [33:0] if_bitget_w_w_WordLength_0_1_out1_6;  // sfix34_En31
  wire signed [33:0] if_bitget_w_w_WordLength_1_1_out1_7;  // sfix34_En31
  wire signed [33:0] bitsrl_y_int32_2_out1_7;  // sfix34_En31
  wire signed [33:0] y_tmp1_out1_14;  // sfix34_En31
  wire signed [33:0] y_tmp1_out1_15;  // sfix34_En31
  wire signed [33:0] if_bitget_w_w_WordLength_0_1_out1_7;  // sfix34_En31
  wire signed [33:0] if_bitget_w_w_WordLength_1_1_out1_8;  // sfix34_En31
  wire signed [33:0] bitsrl_y_int32_2_out1_8;  // sfix34_En31
  wire signed [33:0] y_tmp1_out1_16;  // sfix34_En31
  wire signed [33:0] y_tmp1_out1_17;  // sfix34_En31
  wire signed [33:0] if_bitget_w_w_WordLength_0_1_out1_8;  // sfix34_En31
  wire signed [33:0] if_bitget_w_w_WordLength_1_1_out1_9;  // sfix34_En31
  wire signed [33:0] bitsrl_y_int32_2_out1_9;  // sfix34_En31
  wire signed [33:0] y_tmp1_out1_18;  // sfix34_En31
  wire signed [33:0] y_tmp1_out1_19;  // sfix34_En31
  wire signed [33:0] if_bitget_w_w_WordLength_0_1_out1_9;  // sfix34_En31
  wire signed [33:0] if_bitget_w_w_WordLength_1_1_out1_10;  // sfix34_En31
  wire signed [33:0] bitsrl_y_int32_2_out1_10;  // sfix34_En31
  wire signed [33:0] y_tmp1_out1_20;  // sfix34_En31
  wire signed [33:0] y_tmp1_out1_21;  // sfix34_En31
  wire signed [33:0] if_bitget_w_w_WordLength_0_1_out1_10;  // sfix34_En31
  wire signed [33:0] if_bitget_w_w_WordLength_1_1_out1_11;  // sfix34_En31
  wire signed [32:0] Log2Table_int32_11_out1_1;  // sfix33_En31
  wire signed [32:0] Log2MinusTable_int32_11_out1_1;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_0_out1_10;  // sfix33_En31
  wire signed [32:0] w_Log2MinusTable_int32_2_out1_9;  // sfix33_En31
  wire signed [32:0] if_bitget_w_w_WordLength_1_out1_11;  // sfix33_En31
  wire [20:0] Bit_Slice_out1;  // ufix21
  wire signed [20:0] Data_Type_Conversion_out1_1;  // sfix21_En19
  wire [20:0] Bit_Slice2_out1;  // ufix21
  wire signed [20:0] Data_Type_Conversion1_out1;  // sfix21_En19
  wire signed [20:0] alpha0_69314717873930931_out1;  // sfix21_En19
  wire signed [41:0] tmp1_0_69314717873930931_mul_temp;  // sfix42_En38
  wire signed [20:0] tmp1_0_69314717873930931_out1;  // sfix21_En19
  wire signed [41:0] tmp2_y_mul_temp;  // sfix42_En38
  wire signed [20:0] tmp2_y_out1;  // sfix21_En19
  wire Bit_Slice1_out1;  // ufix1
  wire signed [12:0] Constant1_out1;  // sfix13
  wire signed [12:0] Constant_out1_9;  // sfix13
  wire signed [12:0] Switch_out1_1;  // sfix13
  wire [33:0] Bit_Concat_out1_11;  // ufix34
  wire signed [33:0] DTC2_out1_1;  // sfix34_En31
  wire signed [33:0] y_tmp3_out1;  // sfix34_En31
  wire [23:0] BitSlice_out1_15;  // ufix24
  wire [23:0] if_exp_out_0_1_out1;  // ufix24
  wire [24:0] Bit_Concat_out1_12;  // ufix25
  wire BitSlice_out1_16;  // ufix1
  wire BitSlice1_out1_13;  // ufix1
  wire alphabitget_Mant_tmp_2_0_out1;  // ufix1
  wire alphabitget_Mant_tmp_1_0_out1;  // ufix1
  wire [24:0] cast_2_like_Mant_tmp_out1;  // ufix25
  wire [31:0] Mant_tmp_cast_2_like_Man_add_temp;  // ufix32
  wire [31:0] Mant_tmp_cast_2_like_Man_1;  // ufix32
  wire [31:0] Mant_tmp_cast_2_like_Man_2;  // ufix32
  wire [24:0] Mant_tmp_cast_2_like_Man_out1;  // ufix25
  wire [24:0] if_bitget_Mant_tmp_1_0_out1;  // ufix25
  wire BitSlice2_out1_2;  // ufix1
  wire BitSlice2_out1_3;  // ufix1
  wire Logical_Operator_out1_1;  // ufix1
  wire BitSlice1_out1_14;  // ufix1
  wire bitget_y_cfType_Pow2Intermedi_out1;  // ufix1
  wire [7:0] C1_out1_5;  // ufix8
  wire [7:0] C_out1_6;  // ufix8
  wire [7:0] if_bitget_y_cfType_Pow2Intermed_out1;  // ufix8
  wire [7:0] DTC_out1_1;  // ufix8
  wire [7:0] if_exp_out_0_out1;  // ufix8
  wire [7:0] cast_1_like_Exp_out1;  // ufix8
  wire [7:0] Exp_cast_1_like_Exp_out1;  // ufix8
  wire [7:0] if_bitget_Mant_tmp_Mant_tmp_Wor_out1;  // ufix8
  wire [7:0] if_in_range_out1;  // ufix8
  wire [7:0] C_out1_7;  // ufix8
  wire [7:0] if_aMantissa_0_aSign_out1;  // ufix8
  wire [7:0] if_aExponent_cfType_Exponent_out1;  // ufix8
  wire [22:0] C2_out1_2;  // ufix23
  wire Compare_To_Zero_out1_1;  // ufix1
  wire Logical_Operator_out1_2;  // ufix1
  wire [22:0] BitSlice3_out1;  // ufix23
  wire [22:0] C_out1_8;  // ufix23
  wire [22:0] if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1;  // ufix23
  wire [22:0] if_in_range_1_out1;  // ufix23
  wire [22:0] if_aExponent_cfType_Exponent_1_out1;  // ufix23
  wire [31:0] nfp_out_pack;  // ufix32


  // Split 32 bit word into FP sign, exponent, mantissa
  assign aSign = nfp_in[31];
  assign aExponent = nfp_in[30:23];
  assign aMantissa = nfp_in[22:0];



  assign aExponent_cfType_Exponent_I_out1 = aExponent == 8'b11111111;



  assign C3_out1 = 1'b0;



  assign Compare_To_Zero_out1 = aExponent == 8'b00000000;



  assign Constant_out1 = 23'b00000000000000000000000;



  assign Switch_out1 = (Compare_To_Zero_out1 == 1'b0 ? aMantissa :
              Constant_out1);



  assign aMantissa_0_out1 = Switch_out1 == 23'b00000000000000000000000;



  assign alphaaMantissa_0_aSign_out1 = aSign & aMantissa_0_out1;



  assign C2_out1 = 1'b0;



  assign if_aMantissa_0_aSign_2_out1 = (alphaaMantissa_0_aSign_out1 == 1'b0 ? aSign :
              C2_out1);



  assign if_aExponent_cfType_Exponent_2_out1 = (aExponent_cfType_Exponent_I_out1 == 1'b0 ? C3_out1 :
              if_aMantissa_0_aSign_2_out1);



  assign C1_out1 = 11'sb00010000110;



  assign C_out1 = 11'sb00010000110;



  assign if_aSign_out1 = (aSign == 1'b0 ? C1_out1 :
              C_out1);



  assign alpha0_out1 = 3'b000;



  assign Exponent_0_out1 = aExponent == 8'b00000000;



  assign alpha1_out1 = 1'b1;



  assign Bit_Concat1_out1 = {alpha1_out1, Switch_out1};



  assign alpha0_out1_1 = 1'b0;



  assign Bit_Concat_out1 = {alpha0_out1_1, Switch_out1};



  assign if_Exponent_0_cfType_Exp_out1 = (Exponent_0_out1 == 1'b0 ? Bit_Concat1_out1 :
              Bit_Concat_out1);



  assign reinterpretcast_mant_cor_nume_out1 = if_Exponent_0_cfType_Exp_out1;



  assign alpha1_66096404753625392914_out1 = 33'h0D49A784C;



  assign tmp1_1_66096404753625392914_mul_temp = reinterpretcast_mant_cor_nume_out1 * alpha1_66096404753625392914_out1;
  assign tmp1_1_66096404753625392914_out1 = tmp1_1_66096404753625392914_mul_temp[55:23];



  assign BitSlice_out1 = tmp1_1_66096404753625392914_out1[32];



  assign C_out1_1 = 8'b00000001;



  assign if_Exponent_0_out1 = (Exponent_0_out1 == 1'b0 ? aExponent :
              C_out1_1);



  assign C1_out1_1 = 8'b00000001;



  assign exp_cor_1_1 = {1'b0, if_Exponent_0_out1};
  assign exp_cor_1_2 = {1'b0, C1_out1_1};
  assign exp_cor_1_add_temp = exp_cor_1_1 + exp_cor_1_2;
  assign exp_cor_1_out1 = (exp_cor_1_add_temp[8] != 1'b0 ? 8'b11111111 :
              exp_cor_1_add_temp[7:0]);



  assign C_out1_2 = 8'b00000010;



  assign exp_cor_2_1 = {1'b0, if_Exponent_0_out1};
  assign exp_cor_2_2 = {1'b0, C_out1_2};
  assign exp_cor_2_add_temp = exp_cor_2_1 + exp_cor_2_2;
  assign exp_cor_2_out1 = (exp_cor_2_add_temp[8] != 1'b0 ? 8'b11111111 :
              exp_cor_2_add_temp[7:0]);



  assign if_bitget_tmp2_tmp2_WordLength_out1 = (BitSlice_out1 == 1'b0 ? exp_cor_1_out1 :
              exp_cor_2_out1);



  assign Bit_Concat_out1_1 = {alpha0_out1, if_bitget_tmp2_tmp2_WordLength_out1};



  assign reinterpretcast_bitconcat_fi_0_out1 = Bit_Concat_out1_1;



  assign exp_tmp_upperBound_relop1 = if_aSign_out1 > reinterpretcast_bitconcat_fi_0_out1;



  assign C1_out1_2 = 8'b11111111;



  assign C_out1_3 = 8'b00000000;



  assign if_aSign_out1_1 = (aSign == 1'b0 ? C1_out1_2 :
              C_out1_3);



  assign alpha0_out1_2 = 1'b0;



  assign alpha127_out1 = 10'sb0001111111;



  assign alpha1_out1_1 = 1'b0;



  assign C4_out1 = 40'h0000000000;



  assign cast_cfType_ExponentBias_lik_out1 = 11'sb00001111111;



  assign exp_tmp_cast_cfType_Exponent_1 = {reinterpretcast_bitconcat_fi_0_out1[10], reinterpretcast_bitconcat_fi_0_out1};
  assign exp_tmp_cast_cfType_Exponent_2 = {cast_cfType_ExponentBias_lik_out1[10], cast_cfType_ExponentBias_lik_out1};
  assign exp_tmp_cast_cfType_Exponent_out1 = exp_tmp_cast_cfType_Exponent_1 - exp_tmp_cast_cfType_Exponent_2;



  assign DTC_out1 = exp_tmp_cast_cfType_Exponent_out1[10:0];



  assign BitSlice_out1_1 = DTC_out1[10];



  assign alpha3_out1 = 8'b00000000;



  assign BitSlice2_out1 = tmp1_1_66096404753625392914_out1[31:0];



  assign reinterpretcast_bitsliceget_t_out1 = BitSlice2_out1;



  assign BitSlice1_out1 = tmp1_1_66096404753625392914_out1[32:1];



  assign reinterpretcast_bitsliceget_t_out1_1 = BitSlice1_out1;



  assign if_bitget_tmp2_tmp2_WordLength_1_out1 = (BitSlice_out1 == 1'b0 ? reinterpretcast_bitsliceget_t_out1 :
              reinterpretcast_bitsliceget_t_out1_1);



  assign Bit_Concat3_out1 = {alpha3_out1, if_bitget_tmp2_tmp2_WordLength_1_out1};



  assign reinterpretcast_bitconcat_fi_0_out1_1 = Bit_Concat3_out1;



  assign DTC2_out1 = ((DTC_out1[10] == 1'b0) && (DTC_out1[9:5] != 5'b00000) ? 5'b11111 :
              (DTC_out1[10] == 1'b1 ? 5'b00000 :
              DTC_out1[4:0]));



  assign dynamic_shift_cast = {3'b0, DTC2_out1};
  assign bitsll_tmp1_shift_length_out1 = reinterpretcast_bitconcat_fi_0_out1_1 <<< dynamic_shift_cast;



  assign cast_cfType_ExponentBias_lik_out1_1 = 8'b01111111;



  assign cast_cfType_ExponentBias_lik_3 = {4'b0, cast_cfType_ExponentBias_lik_out1_1};
  assign cast_cfType_ExponentBias_lik_4 = {4'b0, if_bitget_tmp2_tmp2_WordLength_out1};
  assign cast_cfType_ExponentBias_lik_sub_temp = cast_cfType_ExponentBias_lik_3 - cast_cfType_ExponentBias_lik_4;
  assign cast_cfType_ExponentBias_lik_out1_2 = cast_cfType_ExponentBias_lik_sub_temp[8:0];



  assign DTC1_out1 = (cast_cfType_ExponentBias_lik_out1_2[8:5] != 4'b0000 ? 5'b11111 :
              cast_cfType_ExponentBias_lik_out1_2[4:0]);



  assign dynamic_shift_cast_1 = {3'b0, DTC1_out1};
  assign Shift_Arithmetic_out1 = reinterpretcast_bitconcat_fi_0_out1_1 >>> dynamic_shift_cast_1;



  assign if_shift_sign_out1 = (BitSlice_out1_1 == 1'b0 ? bitsll_tmp1_shift_length_out1 :
              Shift_Arithmetic_out1);



  assign if_exp_tmp_upperBound_1_out1 = (exp_tmp_upperBound_relop1 == 1'b0 ? C4_out1 :
              if_shift_sign_out1);



  assign BitSlice2_out1_1 = if_exp_tmp_upperBound_1_out1[39:31];



  assign Bit_Concat1_out1_1 = {alpha1_out1_1, BitSlice2_out1_1};



  assign reinterpretcast_bitconcat_fi_0_out1_2 = Bit_Concat1_out1_1;



  assign alpha127_exp_tmp_out1 = alpha127_out1 + reinterpretcast_bitconcat_fi_0_out1_2;



  assign cast_1_like_mant_frac_out1 = 32'b10000000000000000000000000000000;



  assign alpha0_out1_3 = 1'b0;



  assign BitSlice_out1_2 = if_exp_tmp_upperBound_1_out1[30:0];



  assign Bit_Concat_out1_2 = {alpha0_out1_3, BitSlice_out1_2};



  assign reinterpretcast_bitconcat_fi_0_out1_3 = Bit_Concat_out1_2;



  assign cast_1_like_mant_frac_m_out1 = cast_1_like_mant_frac_out1 - reinterpretcast_bitconcat_fi_0_out1_3;



  assign BitSlice1_out1_1 = cast_1_like_mant_frac_m_out1[31];



  assign Logical_Operator_out1 =  ~ BitSlice1_out1_1;



  assign C1_out1_3 = 10'sb0001111111;



  assign exp_adj_exp_tmp_out1 = C1_out1_3 - reinterpretcast_bitconcat_fi_0_out1_2;



  assign C_out1_4 = 10'sb0001111110;



  assign exp_adj_exp_tmp1_out1 = C_out1_4 - reinterpretcast_bitconcat_fi_0_out1_2;



  assign if_sticky_out1 = (Logical_Operator_out1 == 1'b0 ? exp_adj_exp_tmp_out1 :
              exp_adj_exp_tmp1_out1);



  assign if_aSign_1_out1 = (aSign == 1'b0 ? alpha127_exp_tmp_out1 :
              if_sticky_out1);



  assign exp_out_0_out1 = if_aSign_1_out1 > 10'sb0000000000;



  assign C2_out1_1 = 24'b000000000000000000000000;



  assign Logical_Operator1_out1 = aSign & Logical_Operator_out1;



  assign if_sticky_1_out1 = (Logical_Operator1_out1 == 1'b0 ? reinterpretcast_bitconcat_fi_0_out1_3 :
              cast_1_like_mant_frac_m_out1);



  assign Constant_out1_1 = 1'b0;



  assign Bit_Concat_out1_3 = {if_sticky_1_out1, Constant_out1_1};



  assign Data_Type_Conversion_out1 = Bit_Concat_out1_3;



  assign BitSlice_out1_3 = Data_Type_Conversion_out1[31];



  assign Log2Table_1_out1 = 33'sh16A3FE5C6;



  assign w_Log2Table_1_out1 = Data_Type_Conversion_out1 + Log2Table_1_out1;



  assign if_bitget_w_w_WordLength_1_out1 = (BitSlice_out1_3 == 1'b0 ? Data_Type_Conversion_out1 :
              w_Log2Table_1_out1);



  assign bitsll_w_1_out1 = if_bitget_w_w_WordLength_1_out1 <<< 8'd1;



  assign BitSlice1_out1_2 = bitsll_w_1_out1[31];



  assign BitSlice_out1_4 = bitsll_w_1_out1[32];



  assign alphabitget_w_w_WordLength_1_out1 = BitSlice1_out1_2 ^ BitSlice_out1_4;



  assign Log2Table_int32_2_out1 = 33'sh15B2C3DA2;



  assign Log2MinusTable_int32_2_out1 = 33'sh0D47FCB8C;



  assign if_bitget_w_w_WordLength_0_out1 = (BitSlice_out1_4 == 1'b0 ? Log2Table_int32_2_out1 :
              Log2MinusTable_int32_2_out1);



  assign w_Log2MinusTable_int32_2_1_out1 = bitsll_w_1_out1 + if_bitget_w_w_WordLength_0_out1;



  assign if_bitget_w_w_WordLength_1_out1_1 = (alphabitget_w_w_WordLength_1_out1 == 1'b0 ? bitsll_w_1_out1 :
              w_Log2MinusTable_int32_2_1_out1);



  assign bitsll_w_1_out1_1 = if_bitget_w_w_WordLength_1_out1_1 <<< 8'd1;



  assign BitSlice1_out1_3 = bitsll_w_1_out1_1[31];



  assign BitSlice_out1_5 = bitsll_w_1_out1_1[32];



  assign alphabitget_w_w_WordLength_1_out1_1 = BitSlice1_out1_3 ^ BitSlice_out1_5;



  assign Log2Table_int32_3_out1 = 33'sh151FF2E30;



  assign Log2MinusTable_int32_3_out1 = 33'sh0C544C056;



  assign if_bitget_w_w_WordLength_0_out1_1 = (BitSlice_out1_5 == 1'b0 ? Log2Table_int32_3_out1 :
              Log2MinusTable_int32_3_out1);



  assign w_Log2MinusTable_int32_2_out1 = bitsll_w_1_out1_1 + if_bitget_w_w_WordLength_0_out1_1;



  assign if_bitget_w_w_WordLength_1_out1_2 = (alphabitget_w_w_WordLength_1_out1_1 == 1'b0 ? bitsll_w_1_out1_1 :
              w_Log2MinusTable_int32_2_out1);



  assign bitsll_w_1_out1_2 = if_bitget_w_w_WordLength_1_out1_2 <<< 8'd1;



  assign BitSlice1_out1_4 = bitsll_w_1_out1_2[31];



  assign BitSlice_out1_6 = bitsll_w_1_out1_2[32];



  assign alphabitget_w_w_WordLength_1_out1_2 = BitSlice1_out1_4 ^ BitSlice_out1_6;



  assign Log2Table_int32_4_out1 = 33'sh14CE0482A;



  assign Log2MinusTable_int32_4_out1 = 33'sh0BEB024B6;



  assign if_bitget_w_w_WordLength_0_out1_2 = (BitSlice_out1_6 == 1'b0 ? Log2Table_int32_4_out1 :
              Log2MinusTable_int32_4_out1);



  assign w_Log2MinusTable_int32_2_out1_1 = bitsll_w_1_out1_2 + if_bitget_w_w_WordLength_0_out1_2;



  assign if_bitget_w_w_WordLength_1_out1_3 = (alphabitget_w_w_WordLength_1_out1_2 == 1'b0 ? bitsll_w_1_out1_2 :
              w_Log2MinusTable_int32_2_out1_1);



  assign bitsll_w_1_out1_3 = if_bitget_w_w_WordLength_1_out1_3 <<< 8'd1;



  assign BitSlice1_out1_5 = bitsll_w_1_out1_3[31];



  assign BitSlice_out1_7 = bitsll_w_1_out1_3[32];



  assign alphabitget_w_w_WordLength_1_out1_3 = BitSlice1_out1_5 ^ BitSlice_out1_7;



  assign Log2Table_int32_5_out1 = 33'sh14A296454;



  assign Log2MinusTable_int32_5_out1 = 33'sh0BB9CA64E;



  assign if_bitget_w_w_WordLength_0_out1_3 = (BitSlice_out1_7 == 1'b0 ? Log2Table_int32_5_out1 :
              Log2MinusTable_int32_5_out1);



  assign w_Log2MinusTable_int32_2_out1_2 = bitsll_w_1_out1_3 + if_bitget_w_w_WordLength_0_out1_3;



  assign if_bitget_w_w_WordLength_1_out1_4 = (alphabitget_w_w_WordLength_1_out1_3 == 1'b0 ? bitsll_w_1_out1_3 :
              w_Log2MinusTable_int32_2_out1_2);



  assign bitsll_w_1_out1_4 = if_bitget_w_w_WordLength_1_out1_4 <<< 8'd1;



  assign BitSlice1_out1_6 = bitsll_w_1_out1_4[31];



  assign BitSlice_out1_8 = bitsll_w_1_out1_4[32];



  assign alphabitget_w_w_WordLength_1_out1_4 = BitSlice1_out1_6 ^ BitSlice_out1_8;



  assign Log2Table_int32_6_out1 = 33'sh148C34BD2;



  assign Log2MinusTable_int32_6_out1 = 33'sh0BA1F7430;



  assign if_bitget_w_w_WordLength_0_out1_4 = (BitSlice_out1_8 == 1'b0 ? Log2Table_int32_6_out1 :
              Log2MinusTable_int32_6_out1);



  assign w_Log2MinusTable_int32_2_out1_3 = bitsll_w_1_out1_4 + if_bitget_w_w_WordLength_0_out1_4;



  assign if_bitget_w_w_WordLength_1_out1_5 = (alphabitget_w_w_WordLength_1_out1_4 == 1'b0 ? bitsll_w_1_out1_4 :
              w_Log2MinusTable_int32_2_out1_3);



  assign bitsll_w_1_out1_5 = if_bitget_w_w_WordLength_1_out1_5 <<< 8'd1;



  assign BitSlice1_out1_7 = bitsll_w_1_out1_5[31];



  assign BitSlice_out1_9 = bitsll_w_1_out1_5[32];



  assign alphabitget_w_w_WordLength_1_out1_5 = BitSlice1_out1_7 ^ BitSlice_out1_9;



  assign Log2Table_int32_7_out1 = 33'sh1480D7A48;



  assign Log2MinusTable_int32_7_out1 = 33'sh0B963DD10;



  assign if_bitget_w_w_WordLength_0_out1_5 = (BitSlice_out1_9 == 1'b0 ? Log2Table_int32_7_out1 :
              Log2MinusTable_int32_7_out1);



  assign w_Log2MinusTable_int32_2_out1_4 = bitsll_w_1_out1_5 + if_bitget_w_w_WordLength_0_out1_5;



  assign if_bitget_w_w_WordLength_1_out1_6 = (alphabitget_w_w_WordLength_1_out1_5 == 1'b0 ? bitsll_w_1_out1_5 :
              w_Log2MinusTable_int32_2_out1_4);



  assign bitsll_w_1_out1_6 = if_bitget_w_w_WordLength_1_out1_6 <<< 8'd1;



  assign BitSlice1_out1_8 = bitsll_w_1_out1_6[31];



  assign BitSlice_out1_10 = bitsll_w_1_out1_6[32];



  assign alphabitget_w_w_WordLength_1_out1_6 = BitSlice1_out1_8 ^ BitSlice_out1_10;



  assign Log2Table_int32_8_out1 = 33'sh147B1DC94;



  assign Log2MinusTable_int32_8_out1 = 33'sh0B906CE04;



  assign if_bitget_w_w_WordLength_0_out1_6 = (BitSlice_out1_10 == 1'b0 ? Log2Table_int32_8_out1 :
              Log2MinusTable_int32_8_out1);



  assign w_Log2MinusTable_int32_2_out1_5 = bitsll_w_1_out1_6 + if_bitget_w_w_WordLength_0_out1_6;



  assign if_bitget_w_w_WordLength_1_out1_7 = (alphabitget_w_w_WordLength_1_out1_6 == 1'b0 ? bitsll_w_1_out1_6 :
              w_Log2MinusTable_int32_2_out1_5);



  assign bitsll_w_1_out1_7 = if_bitget_w_w_WordLength_1_out1_7 <<< 8'd1;



  assign BitSlice1_out1_9 = bitsll_w_1_out1_7[31];



  assign BitSlice_out1_11 = bitsll_w_1_out1_7[32];



  assign alphabitget_w_w_WordLength_1_out1_7 = BitSlice1_out1_9 ^ BitSlice_out1_11;



  assign Log2Table_int32_9_out1 = 33'sh14783E008;



  assign Log2MinusTable_int32_9_out1 = 33'sh0B8D87522;



  assign if_bitget_w_w_WordLength_0_out1_7 = (BitSlice_out1_11 == 1'b0 ? Log2Table_int32_9_out1 :
              Log2MinusTable_int32_9_out1);



  assign w_Log2MinusTable_int32_2_out1_6 = bitsll_w_1_out1_7 + if_bitget_w_w_WordLength_0_out1_7;



  assign if_bitget_w_w_WordLength_1_out1_8 = (alphabitget_w_w_WordLength_1_out1_7 == 1'b0 ? bitsll_w_1_out1_7 :
              w_Log2MinusTable_int32_2_out1_6);



  assign bitsll_w_1_out1_8 = if_bitget_w_w_WordLength_1_out1_8 <<< 8'd1;



  assign BitSlice1_out1_10 = bitsll_w_1_out1_8[31];



  assign BitSlice_out1_12 = bitsll_w_1_out1_8[32];



  assign alphabitget_w_w_WordLength_1_out1_8 = BitSlice1_out1_10 ^ BitSlice_out1_12;



  assign Log2Table_int32_10_out1 = 33'sh1476CD646;



  assign Log2MinusTable_int32_10_out1 = 33'sh0B8C1544A;



  assign if_bitget_w_w_WordLength_0_out1_8 = (BitSlice_out1_12 == 1'b0 ? Log2Table_int32_10_out1 :
              Log2MinusTable_int32_10_out1);



  assign w_Log2MinusTable_int32_2_out1_7 = bitsll_w_1_out1_8 + if_bitget_w_w_WordLength_0_out1_8;



  assign if_bitget_w_w_WordLength_1_out1_9 = (alphabitget_w_w_WordLength_1_out1_8 == 1'b0 ? bitsll_w_1_out1_8 :
              w_Log2MinusTable_int32_2_out1_7);



  assign bitsll_w_1_out1_9 = if_bitget_w_w_WordLength_1_out1_9 <<< 8'd1;



  assign BitSlice1_out1_11 = bitsll_w_1_out1_9[31];



  assign BitSlice_out1_13 = bitsll_w_1_out1_9[32];



  assign alphabitget_w_w_WordLength_1_out1_9 = BitSlice1_out1_11 ^ BitSlice_out1_13;



  assign Log2Table_int32_11_out1 = 33'sh147614E84;



  assign Log2MinusTable_int32_11_out1 = 33'sh0B8B5C6C4;



  assign if_bitget_w_w_WordLength_0_out1_9 = (BitSlice_out1_13 == 1'b0 ? Log2Table_int32_11_out1 :
              Log2MinusTable_int32_11_out1);



  assign w_Log2MinusTable_int32_2_out1_8 = bitsll_w_1_out1_9 + if_bitget_w_w_WordLength_0_out1_9;



  assign if_bitget_w_w_WordLength_1_out1_10 = (alphabitget_w_w_WordLength_1_out1_9 == 1'b0 ? bitsll_w_1_out1_9 :
              w_Log2MinusTable_int32_2_out1_8);



  assign bitsll_w_1_out1_10 = if_bitget_w_w_WordLength_1_out1_10 <<< 8'd1;



  assign BitSlice1_out1_12 = bitsll_w_1_out1_10[31];



  assign BitSlice_out1_14 = bitsll_w_1_out1_10[32];



  assign alphabitget_w_w_WordLength_1_out1_10 = BitSlice1_out1_12 ^ BitSlice_out1_14;



  assign C1_out1_4 = 4'sb0010;



  assign C_out1_5 = 4'sb0011;



  assign if_bitget_w_w_WordLength_1_1_out1 = (BitSlice_out1_3 == 1'b0 ? C1_out1_4 :
              C_out1_5);



  assign Constant_out1_2 = 2'b00;



  assign Bit_Concat_out1_4 = {if_bitget_w_w_WordLength_1_1_out1, Constant_out1_2};



  assign dtc1_out1_1 = Bit_Concat_out1_4;



  assign bitsrl_y_int32_2_out1 = dtc1_out1_1 >> 8'd2;



  assign y_tmp1_out1 = dtc1_out1_1 - bitsrl_y_int32_2_out1;



  assign y_tmp1_out1_1 = dtc1_out1_1 + bitsrl_y_int32_2_out1;



  assign if_bitget_w_w_WordLength_0_1_out1 = (BitSlice1_out1_2 == 1'b0 ? y_tmp1_out1 :
              y_tmp1_out1_1);



  assign if_bitget_w_w_WordLength_1_1_out1_1 = (alphabitget_w_w_WordLength_1_out1 == 1'b0 ? dtc1_out1_1 :
              if_bitget_w_w_WordLength_0_1_out1);



  assign Constant_out1_3 = 3'b000;



  assign Bit_Concat_out1_5 = {if_bitget_w_w_WordLength_1_1_out1_1, Constant_out1_3};



  assign dtc1_out1_2 = Bit_Concat_out1_5;



  assign bitsrl_y_int32_2_out1_1 = dtc1_out1_2 >> 8'd3;



  assign y_tmp1_out1_2 = dtc1_out1_2 - bitsrl_y_int32_2_out1_1;



  assign y_tmp1_out1_3 = dtc1_out1_2 + bitsrl_y_int32_2_out1_1;



  assign if_bitget_w_w_WordLength_0_1_out1_1 = (BitSlice1_out1_3 == 1'b0 ? y_tmp1_out1_2 :
              y_tmp1_out1_3);



  assign if_bitget_w_w_WordLength_1_1_out1_2 = (alphabitget_w_w_WordLength_1_out1_1 == 1'b0 ? dtc1_out1_2 :
              if_bitget_w_w_WordLength_0_1_out1_1);



  assign Constant_out1_4 = 4'b0000;



  assign Bit_Concat_out1_6 = {if_bitget_w_w_WordLength_1_1_out1_2, Constant_out1_4};



  assign dtc1_out1_3 = Bit_Concat_out1_6;



  assign bitsrl_y_int32_2_out1_2 = dtc1_out1_3 >> 8'd4;



  assign y_tmp1_out1_4 = dtc1_out1_3 - bitsrl_y_int32_2_out1_2;



  assign y_tmp1_out1_5 = dtc1_out1_3 + bitsrl_y_int32_2_out1_2;



  assign if_bitget_w_w_WordLength_0_1_out1_2 = (BitSlice1_out1_4 == 1'b0 ? y_tmp1_out1_4 :
              y_tmp1_out1_5);



  assign if_bitget_w_w_WordLength_1_1_out1_3 = (alphabitget_w_w_WordLength_1_out1_2 == 1'b0 ? dtc1_out1_3 :
              if_bitget_w_w_WordLength_0_1_out1_2);



  assign Constant_out1_5 = 5'b00000;



  assign Bit_Concat_out1_7 = {if_bitget_w_w_WordLength_1_1_out1_3, Constant_out1_5};



  assign dtc1_out1_4 = Bit_Concat_out1_7;



  assign bitsrl_y_int32_2_out1_3 = dtc1_out1_4 >> 8'd5;



  assign y_tmp1_out1_6 = dtc1_out1_4 - bitsrl_y_int32_2_out1_3;



  assign y_tmp1_out1_7 = dtc1_out1_4 + bitsrl_y_int32_2_out1_3;



  assign if_bitget_w_w_WordLength_0_1_out1_3 = (BitSlice1_out1_5 == 1'b0 ? y_tmp1_out1_6 :
              y_tmp1_out1_7);



  assign if_bitget_w_w_WordLength_1_1_out1_4 = (alphabitget_w_w_WordLength_1_out1_3 == 1'b0 ? dtc1_out1_4 :
              if_bitget_w_w_WordLength_0_1_out1_3);



  assign Constant_out1_6 = 6'b000000;



  assign Bit_Concat_out1_8 = {if_bitget_w_w_WordLength_1_1_out1_4, Constant_out1_6};



  assign dtc1_out1_5 = Bit_Concat_out1_8;



  assign bitsrl_y_int32_2_out1_4 = dtc1_out1_5 >> 8'd6;



  assign y_tmp1_out1_8 = dtc1_out1_5 - bitsrl_y_int32_2_out1_4;



  assign y_tmp1_out1_9 = dtc1_out1_5 + bitsrl_y_int32_2_out1_4;



  assign if_bitget_w_w_WordLength_0_1_out1_4 = (BitSlice1_out1_6 == 1'b0 ? y_tmp1_out1_8 :
              y_tmp1_out1_9);



  assign if_bitget_w_w_WordLength_1_1_out1_5 = (alphabitget_w_w_WordLength_1_out1_4 == 1'b0 ? dtc1_out1_5 :
              if_bitget_w_w_WordLength_0_1_out1_4);



  assign Constant_out1_7 = 7'b0000000;



  assign Bit_Concat_out1_9 = {if_bitget_w_w_WordLength_1_1_out1_5, Constant_out1_7};



  assign dtc1_out1_6 = Bit_Concat_out1_9;



  assign bitsrl_y_int32_2_out1_5 = dtc1_out1_6 >> 8'd7;



  assign y_tmp1_out1_10 = dtc1_out1_6 - bitsrl_y_int32_2_out1_5;



  assign y_tmp1_out1_11 = dtc1_out1_6 + bitsrl_y_int32_2_out1_5;



  assign if_bitget_w_w_WordLength_0_1_out1_5 = (BitSlice1_out1_7 == 1'b0 ? y_tmp1_out1_10 :
              y_tmp1_out1_11);



  assign if_bitget_w_w_WordLength_1_1_out1_6 = (alphabitget_w_w_WordLength_1_out1_5 == 1'b0 ? dtc1_out1_6 :
              if_bitget_w_w_WordLength_0_1_out1_5);



  assign Constant_out1_8 = 3'b000;



  assign Bit_Concat_out1_10 = {if_bitget_w_w_WordLength_1_1_out1_6, Constant_out1_8};



  assign dtc1_out1_7 = Bit_Concat_out1_10;



  assign bitsrl_y_int32_2_out1_6 = dtc1_out1_7 >> 8'd8;



  assign y_tmp1_out1_12 = dtc1_out1_7 - bitsrl_y_int32_2_out1_6;



  assign y_tmp1_out1_13 = dtc1_out1_7 + bitsrl_y_int32_2_out1_6;



  assign if_bitget_w_w_WordLength_0_1_out1_6 = (BitSlice1_out1_8 == 1'b0 ? y_tmp1_out1_12 :
              y_tmp1_out1_13);



  assign if_bitget_w_w_WordLength_1_1_out1_7 = (alphabitget_w_w_WordLength_1_out1_6 == 1'b0 ? dtc1_out1_7 :
              if_bitget_w_w_WordLength_0_1_out1_6);



  assign bitsrl_y_int32_2_out1_7 = if_bitget_w_w_WordLength_1_1_out1_7 >> 8'd9;



  assign y_tmp1_out1_14 = if_bitget_w_w_WordLength_1_1_out1_7 - bitsrl_y_int32_2_out1_7;



  assign y_tmp1_out1_15 = if_bitget_w_w_WordLength_1_1_out1_7 + bitsrl_y_int32_2_out1_7;



  assign if_bitget_w_w_WordLength_0_1_out1_7 = (BitSlice1_out1_9 == 1'b0 ? y_tmp1_out1_14 :
              y_tmp1_out1_15);



  assign if_bitget_w_w_WordLength_1_1_out1_8 = (alphabitget_w_w_WordLength_1_out1_7 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_7 :
              if_bitget_w_w_WordLength_0_1_out1_7);



  assign bitsrl_y_int32_2_out1_8 = if_bitget_w_w_WordLength_1_1_out1_8 >> 8'd10;



  assign y_tmp1_out1_16 = if_bitget_w_w_WordLength_1_1_out1_8 - bitsrl_y_int32_2_out1_8;



  assign y_tmp1_out1_17 = if_bitget_w_w_WordLength_1_1_out1_8 + bitsrl_y_int32_2_out1_8;



  assign if_bitget_w_w_WordLength_0_1_out1_8 = (BitSlice1_out1_10 == 1'b0 ? y_tmp1_out1_16 :
              y_tmp1_out1_17);



  assign if_bitget_w_w_WordLength_1_1_out1_9 = (alphabitget_w_w_WordLength_1_out1_8 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_8 :
              if_bitget_w_w_WordLength_0_1_out1_8);



  assign bitsrl_y_int32_2_out1_9 = if_bitget_w_w_WordLength_1_1_out1_9 >> 8'd11;



  assign y_tmp1_out1_18 = if_bitget_w_w_WordLength_1_1_out1_9 - bitsrl_y_int32_2_out1_9;



  assign y_tmp1_out1_19 = if_bitget_w_w_WordLength_1_1_out1_9 + bitsrl_y_int32_2_out1_9;



  assign if_bitget_w_w_WordLength_0_1_out1_9 = (BitSlice1_out1_11 == 1'b0 ? y_tmp1_out1_18 :
              y_tmp1_out1_19);



  assign if_bitget_w_w_WordLength_1_1_out1_10 = (alphabitget_w_w_WordLength_1_out1_9 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_9 :
              if_bitget_w_w_WordLength_0_1_out1_9);



  assign bitsrl_y_int32_2_out1_10 = if_bitget_w_w_WordLength_1_1_out1_10 >> 8'd12;



  assign y_tmp1_out1_20 = if_bitget_w_w_WordLength_1_1_out1_10 - bitsrl_y_int32_2_out1_10;



  assign y_tmp1_out1_21 = if_bitget_w_w_WordLength_1_1_out1_10 + bitsrl_y_int32_2_out1_10;



  assign if_bitget_w_w_WordLength_0_1_out1_10 = (BitSlice1_out1_12 == 1'b0 ? y_tmp1_out1_20 :
              y_tmp1_out1_21);



  assign if_bitget_w_w_WordLength_1_1_out1_11 = (alphabitget_w_w_WordLength_1_out1_10 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_10 :
              if_bitget_w_w_WordLength_0_1_out1_10);



  assign Log2Table_int32_11_out1_1 = 33'sh1475B89EA;



  assign Log2MinusTable_int32_11_out1_1 = 33'sh0B8B000B8;



  assign if_bitget_w_w_WordLength_0_out1_10 = (BitSlice_out1_14 == 1'b0 ? Log2Table_int32_11_out1_1 :
              Log2MinusTable_int32_11_out1_1);



  assign w_Log2MinusTable_int32_2_out1_9 = bitsll_w_1_out1_10 + if_bitget_w_w_WordLength_0_out1_10;



  assign if_bitget_w_w_WordLength_1_out1_11 = (alphabitget_w_w_WordLength_1_out1_10 == 1'b0 ? bitsll_w_1_out1_10 :
              w_Log2MinusTable_int32_2_out1_9);



  assign Bit_Slice_out1 = if_bitget_w_w_WordLength_1_out1_11[32:12];



  assign Data_Type_Conversion_out1_1 = Bit_Slice_out1;



  assign Bit_Slice2_out1 = if_bitget_w_w_WordLength_1_1_out1_11[32:12];



  assign Data_Type_Conversion1_out1 = Bit_Slice2_out1;



  assign alpha0_69314717873930931_out1 = 21'sb001011000101110010000;



  assign tmp1_0_69314717873930931_mul_temp = Data_Type_Conversion_out1_1 * alpha0_69314717873930931_out1;
  assign tmp1_0_69314717873930931_out1 = tmp1_0_69314717873930931_mul_temp[39:19];



  assign tmp2_y_mul_temp = Data_Type_Conversion1_out1 * tmp1_0_69314717873930931_out1;
  assign tmp2_y_out1 = tmp2_y_mul_temp[39:19];



  assign Bit_Slice1_out1 = tmp2_y_out1[20];



  assign Constant1_out1 = 13'sb0000000000000;



  assign Constant_out1_9 = 13'sb1111111111111;



  assign Switch_out1_1 = (Bit_Slice1_out1 == 1'b0 ? Constant1_out1 :
              Constant_out1_9);



  assign Bit_Concat_out1_11 = {Switch_out1_1, tmp2_y_out1};



  assign DTC2_out1_1 = Bit_Concat_out1_11;



  assign y_tmp3_out1 = if_bitget_w_w_WordLength_1_1_out1_11 + DTC2_out1_1;



  assign BitSlice_out1_15 = y_tmp3_out1[30:7];



  assign if_exp_out_0_1_out1 = (exp_out_0_out1 == 1'b0 ? C2_out1_1 :
              BitSlice_out1_15);



  assign Bit_Concat_out1_12 = {alpha0_out1_2, if_exp_out_0_1_out1};



  assign BitSlice_out1_16 = Bit_Concat_out1_12[0];



  assign BitSlice1_out1_13 = Bit_Concat_out1_12[1];



  assign alphabitget_Mant_tmp_2_0_out1 = BitSlice1_out1_13 | Logical_Operator_out1;



  assign alphabitget_Mant_tmp_1_0_out1 = BitSlice_out1_16 & alphabitget_Mant_tmp_2_0_out1;



  assign cast_2_like_Mant_tmp_out1 = 25'b0000000000000000000000010;



  assign Mant_tmp_cast_2_like_Man_1 = {7'b0, Bit_Concat_out1_12};
  assign Mant_tmp_cast_2_like_Man_2 = {7'b0, cast_2_like_Mant_tmp_out1};
  assign Mant_tmp_cast_2_like_Man_add_temp = Mant_tmp_cast_2_like_Man_1 + Mant_tmp_cast_2_like_Man_2;
  assign Mant_tmp_cast_2_like_Man_out1 = Mant_tmp_cast_2_like_Man_add_temp[24:0];



  assign if_bitget_Mant_tmp_1_0_out1 = (alphabitget_Mant_tmp_1_0_out1 == 1'b0 ? Bit_Concat_out1_12 :
              Mant_tmp_cast_2_like_Man_out1);



  assign BitSlice2_out1_2 = if_bitget_Mant_tmp_1_0_out1[24];



  assign BitSlice2_out1_3 = if_aSign_1_out1[9];



  assign Logical_Operator_out1_1 =  ~ BitSlice2_out1_3;



  assign BitSlice1_out1_14 = y_tmp3_out1[30];



  assign bitget_y_cfType_Pow2Intermedi_out1 = Logical_Operator_out1_1 & BitSlice1_out1_14;



  assign C1_out1_5 = 8'b00000000;



  assign C_out1_6 = 8'b00000001;



  assign if_bitget_y_cfType_Pow2Intermed_out1 = (bitget_y_cfType_Pow2Intermedi_out1 == 1'b0 ? C1_out1_5 :
              C_out1_6);



  assign DTC_out1_1 = if_aSign_1_out1[7:0];



  assign if_exp_out_0_out1 = (exp_out_0_out1 == 1'b0 ? if_bitget_y_cfType_Pow2Intermed_out1 :
              DTC_out1_1);



  assign cast_1_like_Exp_out1 = 8'b00000001;



  assign Exp_cast_1_like_Exp_out1 = if_exp_out_0_out1 + cast_1_like_Exp_out1;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = (BitSlice2_out1_2 == 1'b0 ? if_exp_out_0_out1 :
              Exp_cast_1_like_Exp_out1);



  assign if_in_range_out1 = (exp_tmp_upperBound_relop1 == 1'b0 ? if_aSign_out1_1 :
              if_bitget_Mant_tmp_Mant_tmp_Wor_out1);



  assign C_out1_7 = 8'b00000000;



  assign if_aMantissa_0_aSign_out1 = (alphaaMantissa_0_aSign_out1 == 1'b0 ? aExponent :
              C_out1_7);



  assign if_aExponent_cfType_Exponent_out1 = (aExponent_cfType_Exponent_I_out1 == 1'b0 ? if_in_range_out1 :
              if_aMantissa_0_aSign_out1);



  assign C2_out1_2 = 23'b00000000000000000000000;



  assign Compare_To_Zero_out1_1 = if_bitget_Mant_tmp_Mant_tmp_Wor_out1 == 8'b00000000;



  assign Logical_Operator_out1_2 = Compare_To_Zero_out1_1 | BitSlice2_out1_2;



  assign BitSlice3_out1 = if_bitget_Mant_tmp_1_0_out1[23:1];



  assign C_out1_8 = 23'b00000000000000000000000;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 = (Logical_Operator_out1_2 == 1'b0 ? BitSlice3_out1 :
              C_out1_8);



  assign if_in_range_1_out1 = (exp_tmp_upperBound_relop1 == 1'b0 ? C2_out1_2 :
              if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1);



  assign if_aExponent_cfType_Exponent_1_out1 = (aExponent_cfType_Exponent_I_out1 == 1'b0 ? if_in_range_1_out1 :
              Switch_out1);



  // Combine FP sign, exponent, mantissa into 32 bit word
  assign nfp_out_pack = {if_aExponent_cfType_Exponent_2_out1, if_aExponent_cfType_Exponent_out1, if_aExponent_cfType_Exponent_1_out1};



  assign nfp_out = nfp_out_pack;

endmodule  // nfp_pow10_single

