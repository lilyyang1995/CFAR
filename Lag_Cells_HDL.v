// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SimulinkCFARHDLWorkflowExampleNew\Lag_Cells_HDL.v
// Created: 2023-05-30 17:04:46
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Lag_Cells_HDL
// Source Path: SimulinkCFARHDLWorkflowExampleNew/CFAR Implementation Model/CFAR Core/Training HDL/Lag Cells HDL
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Lag_Cells_HDL
          (clk,
           reset,
           enb,
           Lag_Delay,
           Lag_Sum);


  input   clk;
  input   reset;
  input   enb;
  input   signed [33:0] Lag_Delay;  // sfix34_En12
  output  signed [33:0] Lag_Sum;  // sfix34_En12


  reg signed [33:0] Delay1_out1;  // sfix34_En12
  reg signed [33:0] PreviousLag_reg [0:99];  // sfix34 [100]
  wire signed [33:0] PreviousLag_reg_next [0:99];  // sfix34_En12 [100]
  wire signed [33:0] PreviousLag_out1;  // sfix34_En12
  wire signed [33:0] Add6_out1;  // sfix34_En12
  reg signed [33:0] Delay3_out1;  // sfix34_En12
  reg signed [33:0] Delay6_out1;  // sfix34_En12
  wire signed [34:0] Add7_add_cast;  // sfix35_En12
  wire signed [34:0] Add7_add_cast_1;  // sfix35_En12
  wire signed [34:0] Add7_add_temp;  // sfix35_En12
  wire signed [33:0] Add7_out1;  // sfix34_En12
  reg signed [33:0] Delay2_reg [0:2];  // sfix34 [3]
  wire signed [33:0] Delay2_reg_next [0:2];  // sfix34_En12 [3]
  wire signed [33:0] Delay2_out1;  // sfix34_En12


  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 34'sh000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Lag_Delay;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PreviousLag_process
      if (reset == 1'b1) begin
        PreviousLag_reg[0] <= 34'sh000000000;
        PreviousLag_reg[1] <= 34'sh000000000;
        PreviousLag_reg[2] <= 34'sh000000000;
        PreviousLag_reg[3] <= 34'sh000000000;
        PreviousLag_reg[4] <= 34'sh000000000;
        PreviousLag_reg[5] <= 34'sh000000000;
        PreviousLag_reg[6] <= 34'sh000000000;
        PreviousLag_reg[7] <= 34'sh000000000;
        PreviousLag_reg[8] <= 34'sh000000000;
        PreviousLag_reg[9] <= 34'sh000000000;
        PreviousLag_reg[10] <= 34'sh000000000;
        PreviousLag_reg[11] <= 34'sh000000000;
        PreviousLag_reg[12] <= 34'sh000000000;
        PreviousLag_reg[13] <= 34'sh000000000;
        PreviousLag_reg[14] <= 34'sh000000000;
        PreviousLag_reg[15] <= 34'sh000000000;
        PreviousLag_reg[16] <= 34'sh000000000;
        PreviousLag_reg[17] <= 34'sh000000000;
        PreviousLag_reg[18] <= 34'sh000000000;
        PreviousLag_reg[19] <= 34'sh000000000;
        PreviousLag_reg[20] <= 34'sh000000000;
        PreviousLag_reg[21] <= 34'sh000000000;
        PreviousLag_reg[22] <= 34'sh000000000;
        PreviousLag_reg[23] <= 34'sh000000000;
        PreviousLag_reg[24] <= 34'sh000000000;
        PreviousLag_reg[25] <= 34'sh000000000;
        PreviousLag_reg[26] <= 34'sh000000000;
        PreviousLag_reg[27] <= 34'sh000000000;
        PreviousLag_reg[28] <= 34'sh000000000;
        PreviousLag_reg[29] <= 34'sh000000000;
        PreviousLag_reg[30] <= 34'sh000000000;
        PreviousLag_reg[31] <= 34'sh000000000;
        PreviousLag_reg[32] <= 34'sh000000000;
        PreviousLag_reg[33] <= 34'sh000000000;
        PreviousLag_reg[34] <= 34'sh000000000;
        PreviousLag_reg[35] <= 34'sh000000000;
        PreviousLag_reg[36] <= 34'sh000000000;
        PreviousLag_reg[37] <= 34'sh000000000;
        PreviousLag_reg[38] <= 34'sh000000000;
        PreviousLag_reg[39] <= 34'sh000000000;
        PreviousLag_reg[40] <= 34'sh000000000;
        PreviousLag_reg[41] <= 34'sh000000000;
        PreviousLag_reg[42] <= 34'sh000000000;
        PreviousLag_reg[43] <= 34'sh000000000;
        PreviousLag_reg[44] <= 34'sh000000000;
        PreviousLag_reg[45] <= 34'sh000000000;
        PreviousLag_reg[46] <= 34'sh000000000;
        PreviousLag_reg[47] <= 34'sh000000000;
        PreviousLag_reg[48] <= 34'sh000000000;
        PreviousLag_reg[49] <= 34'sh000000000;
        PreviousLag_reg[50] <= 34'sh000000000;
        PreviousLag_reg[51] <= 34'sh000000000;
        PreviousLag_reg[52] <= 34'sh000000000;
        PreviousLag_reg[53] <= 34'sh000000000;
        PreviousLag_reg[54] <= 34'sh000000000;
        PreviousLag_reg[55] <= 34'sh000000000;
        PreviousLag_reg[56] <= 34'sh000000000;
        PreviousLag_reg[57] <= 34'sh000000000;
        PreviousLag_reg[58] <= 34'sh000000000;
        PreviousLag_reg[59] <= 34'sh000000000;
        PreviousLag_reg[60] <= 34'sh000000000;
        PreviousLag_reg[61] <= 34'sh000000000;
        PreviousLag_reg[62] <= 34'sh000000000;
        PreviousLag_reg[63] <= 34'sh000000000;
        PreviousLag_reg[64] <= 34'sh000000000;
        PreviousLag_reg[65] <= 34'sh000000000;
        PreviousLag_reg[66] <= 34'sh000000000;
        PreviousLag_reg[67] <= 34'sh000000000;
        PreviousLag_reg[68] <= 34'sh000000000;
        PreviousLag_reg[69] <= 34'sh000000000;
        PreviousLag_reg[70] <= 34'sh000000000;
        PreviousLag_reg[71] <= 34'sh000000000;
        PreviousLag_reg[72] <= 34'sh000000000;
        PreviousLag_reg[73] <= 34'sh000000000;
        PreviousLag_reg[74] <= 34'sh000000000;
        PreviousLag_reg[75] <= 34'sh000000000;
        PreviousLag_reg[76] <= 34'sh000000000;
        PreviousLag_reg[77] <= 34'sh000000000;
        PreviousLag_reg[78] <= 34'sh000000000;
        PreviousLag_reg[79] <= 34'sh000000000;
        PreviousLag_reg[80] <= 34'sh000000000;
        PreviousLag_reg[81] <= 34'sh000000000;
        PreviousLag_reg[82] <= 34'sh000000000;
        PreviousLag_reg[83] <= 34'sh000000000;
        PreviousLag_reg[84] <= 34'sh000000000;
        PreviousLag_reg[85] <= 34'sh000000000;
        PreviousLag_reg[86] <= 34'sh000000000;
        PreviousLag_reg[87] <= 34'sh000000000;
        PreviousLag_reg[88] <= 34'sh000000000;
        PreviousLag_reg[89] <= 34'sh000000000;
        PreviousLag_reg[90] <= 34'sh000000000;
        PreviousLag_reg[91] <= 34'sh000000000;
        PreviousLag_reg[92] <= 34'sh000000000;
        PreviousLag_reg[93] <= 34'sh000000000;
        PreviousLag_reg[94] <= 34'sh000000000;
        PreviousLag_reg[95] <= 34'sh000000000;
        PreviousLag_reg[96] <= 34'sh000000000;
        PreviousLag_reg[97] <= 34'sh000000000;
        PreviousLag_reg[98] <= 34'sh000000000;
        PreviousLag_reg[99] <= 34'sh000000000;
      end
      else begin
        if (enb) begin
          PreviousLag_reg[0] <= PreviousLag_reg_next[0];
          PreviousLag_reg[1] <= PreviousLag_reg_next[1];
          PreviousLag_reg[2] <= PreviousLag_reg_next[2];
          PreviousLag_reg[3] <= PreviousLag_reg_next[3];
          PreviousLag_reg[4] <= PreviousLag_reg_next[4];
          PreviousLag_reg[5] <= PreviousLag_reg_next[5];
          PreviousLag_reg[6] <= PreviousLag_reg_next[6];
          PreviousLag_reg[7] <= PreviousLag_reg_next[7];
          PreviousLag_reg[8] <= PreviousLag_reg_next[8];
          PreviousLag_reg[9] <= PreviousLag_reg_next[9];
          PreviousLag_reg[10] <= PreviousLag_reg_next[10];
          PreviousLag_reg[11] <= PreviousLag_reg_next[11];
          PreviousLag_reg[12] <= PreviousLag_reg_next[12];
          PreviousLag_reg[13] <= PreviousLag_reg_next[13];
          PreviousLag_reg[14] <= PreviousLag_reg_next[14];
          PreviousLag_reg[15] <= PreviousLag_reg_next[15];
          PreviousLag_reg[16] <= PreviousLag_reg_next[16];
          PreviousLag_reg[17] <= PreviousLag_reg_next[17];
          PreviousLag_reg[18] <= PreviousLag_reg_next[18];
          PreviousLag_reg[19] <= PreviousLag_reg_next[19];
          PreviousLag_reg[20] <= PreviousLag_reg_next[20];
          PreviousLag_reg[21] <= PreviousLag_reg_next[21];
          PreviousLag_reg[22] <= PreviousLag_reg_next[22];
          PreviousLag_reg[23] <= PreviousLag_reg_next[23];
          PreviousLag_reg[24] <= PreviousLag_reg_next[24];
          PreviousLag_reg[25] <= PreviousLag_reg_next[25];
          PreviousLag_reg[26] <= PreviousLag_reg_next[26];
          PreviousLag_reg[27] <= PreviousLag_reg_next[27];
          PreviousLag_reg[28] <= PreviousLag_reg_next[28];
          PreviousLag_reg[29] <= PreviousLag_reg_next[29];
          PreviousLag_reg[30] <= PreviousLag_reg_next[30];
          PreviousLag_reg[31] <= PreviousLag_reg_next[31];
          PreviousLag_reg[32] <= PreviousLag_reg_next[32];
          PreviousLag_reg[33] <= PreviousLag_reg_next[33];
          PreviousLag_reg[34] <= PreviousLag_reg_next[34];
          PreviousLag_reg[35] <= PreviousLag_reg_next[35];
          PreviousLag_reg[36] <= PreviousLag_reg_next[36];
          PreviousLag_reg[37] <= PreviousLag_reg_next[37];
          PreviousLag_reg[38] <= PreviousLag_reg_next[38];
          PreviousLag_reg[39] <= PreviousLag_reg_next[39];
          PreviousLag_reg[40] <= PreviousLag_reg_next[40];
          PreviousLag_reg[41] <= PreviousLag_reg_next[41];
          PreviousLag_reg[42] <= PreviousLag_reg_next[42];
          PreviousLag_reg[43] <= PreviousLag_reg_next[43];
          PreviousLag_reg[44] <= PreviousLag_reg_next[44];
          PreviousLag_reg[45] <= PreviousLag_reg_next[45];
          PreviousLag_reg[46] <= PreviousLag_reg_next[46];
          PreviousLag_reg[47] <= PreviousLag_reg_next[47];
          PreviousLag_reg[48] <= PreviousLag_reg_next[48];
          PreviousLag_reg[49] <= PreviousLag_reg_next[49];
          PreviousLag_reg[50] <= PreviousLag_reg_next[50];
          PreviousLag_reg[51] <= PreviousLag_reg_next[51];
          PreviousLag_reg[52] <= PreviousLag_reg_next[52];
          PreviousLag_reg[53] <= PreviousLag_reg_next[53];
          PreviousLag_reg[54] <= PreviousLag_reg_next[54];
          PreviousLag_reg[55] <= PreviousLag_reg_next[55];
          PreviousLag_reg[56] <= PreviousLag_reg_next[56];
          PreviousLag_reg[57] <= PreviousLag_reg_next[57];
          PreviousLag_reg[58] <= PreviousLag_reg_next[58];
          PreviousLag_reg[59] <= PreviousLag_reg_next[59];
          PreviousLag_reg[60] <= PreviousLag_reg_next[60];
          PreviousLag_reg[61] <= PreviousLag_reg_next[61];
          PreviousLag_reg[62] <= PreviousLag_reg_next[62];
          PreviousLag_reg[63] <= PreviousLag_reg_next[63];
          PreviousLag_reg[64] <= PreviousLag_reg_next[64];
          PreviousLag_reg[65] <= PreviousLag_reg_next[65];
          PreviousLag_reg[66] <= PreviousLag_reg_next[66];
          PreviousLag_reg[67] <= PreviousLag_reg_next[67];
          PreviousLag_reg[68] <= PreviousLag_reg_next[68];
          PreviousLag_reg[69] <= PreviousLag_reg_next[69];
          PreviousLag_reg[70] <= PreviousLag_reg_next[70];
          PreviousLag_reg[71] <= PreviousLag_reg_next[71];
          PreviousLag_reg[72] <= PreviousLag_reg_next[72];
          PreviousLag_reg[73] <= PreviousLag_reg_next[73];
          PreviousLag_reg[74] <= PreviousLag_reg_next[74];
          PreviousLag_reg[75] <= PreviousLag_reg_next[75];
          PreviousLag_reg[76] <= PreviousLag_reg_next[76];
          PreviousLag_reg[77] <= PreviousLag_reg_next[77];
          PreviousLag_reg[78] <= PreviousLag_reg_next[78];
          PreviousLag_reg[79] <= PreviousLag_reg_next[79];
          PreviousLag_reg[80] <= PreviousLag_reg_next[80];
          PreviousLag_reg[81] <= PreviousLag_reg_next[81];
          PreviousLag_reg[82] <= PreviousLag_reg_next[82];
          PreviousLag_reg[83] <= PreviousLag_reg_next[83];
          PreviousLag_reg[84] <= PreviousLag_reg_next[84];
          PreviousLag_reg[85] <= PreviousLag_reg_next[85];
          PreviousLag_reg[86] <= PreviousLag_reg_next[86];
          PreviousLag_reg[87] <= PreviousLag_reg_next[87];
          PreviousLag_reg[88] <= PreviousLag_reg_next[88];
          PreviousLag_reg[89] <= PreviousLag_reg_next[89];
          PreviousLag_reg[90] <= PreviousLag_reg_next[90];
          PreviousLag_reg[91] <= PreviousLag_reg_next[91];
          PreviousLag_reg[92] <= PreviousLag_reg_next[92];
          PreviousLag_reg[93] <= PreviousLag_reg_next[93];
          PreviousLag_reg[94] <= PreviousLag_reg_next[94];
          PreviousLag_reg[95] <= PreviousLag_reg_next[95];
          PreviousLag_reg[96] <= PreviousLag_reg_next[96];
          PreviousLag_reg[97] <= PreviousLag_reg_next[97];
          PreviousLag_reg[98] <= PreviousLag_reg_next[98];
          PreviousLag_reg[99] <= PreviousLag_reg_next[99];
        end
      end
    end

  assign PreviousLag_out1 = PreviousLag_reg[99];
  assign PreviousLag_reg_next[0] = Delay1_out1;
  assign PreviousLag_reg_next[1] = PreviousLag_reg[0];
  assign PreviousLag_reg_next[2] = PreviousLag_reg[1];
  assign PreviousLag_reg_next[3] = PreviousLag_reg[2];
  assign PreviousLag_reg_next[4] = PreviousLag_reg[3];
  assign PreviousLag_reg_next[5] = PreviousLag_reg[4];
  assign PreviousLag_reg_next[6] = PreviousLag_reg[5];
  assign PreviousLag_reg_next[7] = PreviousLag_reg[6];
  assign PreviousLag_reg_next[8] = PreviousLag_reg[7];
  assign PreviousLag_reg_next[9] = PreviousLag_reg[8];
  assign PreviousLag_reg_next[10] = PreviousLag_reg[9];
  assign PreviousLag_reg_next[11] = PreviousLag_reg[10];
  assign PreviousLag_reg_next[12] = PreviousLag_reg[11];
  assign PreviousLag_reg_next[13] = PreviousLag_reg[12];
  assign PreviousLag_reg_next[14] = PreviousLag_reg[13];
  assign PreviousLag_reg_next[15] = PreviousLag_reg[14];
  assign PreviousLag_reg_next[16] = PreviousLag_reg[15];
  assign PreviousLag_reg_next[17] = PreviousLag_reg[16];
  assign PreviousLag_reg_next[18] = PreviousLag_reg[17];
  assign PreviousLag_reg_next[19] = PreviousLag_reg[18];
  assign PreviousLag_reg_next[20] = PreviousLag_reg[19];
  assign PreviousLag_reg_next[21] = PreviousLag_reg[20];
  assign PreviousLag_reg_next[22] = PreviousLag_reg[21];
  assign PreviousLag_reg_next[23] = PreviousLag_reg[22];
  assign PreviousLag_reg_next[24] = PreviousLag_reg[23];
  assign PreviousLag_reg_next[25] = PreviousLag_reg[24];
  assign PreviousLag_reg_next[26] = PreviousLag_reg[25];
  assign PreviousLag_reg_next[27] = PreviousLag_reg[26];
  assign PreviousLag_reg_next[28] = PreviousLag_reg[27];
  assign PreviousLag_reg_next[29] = PreviousLag_reg[28];
  assign PreviousLag_reg_next[30] = PreviousLag_reg[29];
  assign PreviousLag_reg_next[31] = PreviousLag_reg[30];
  assign PreviousLag_reg_next[32] = PreviousLag_reg[31];
  assign PreviousLag_reg_next[33] = PreviousLag_reg[32];
  assign PreviousLag_reg_next[34] = PreviousLag_reg[33];
  assign PreviousLag_reg_next[35] = PreviousLag_reg[34];
  assign PreviousLag_reg_next[36] = PreviousLag_reg[35];
  assign PreviousLag_reg_next[37] = PreviousLag_reg[36];
  assign PreviousLag_reg_next[38] = PreviousLag_reg[37];
  assign PreviousLag_reg_next[39] = PreviousLag_reg[38];
  assign PreviousLag_reg_next[40] = PreviousLag_reg[39];
  assign PreviousLag_reg_next[41] = PreviousLag_reg[40];
  assign PreviousLag_reg_next[42] = PreviousLag_reg[41];
  assign PreviousLag_reg_next[43] = PreviousLag_reg[42];
  assign PreviousLag_reg_next[44] = PreviousLag_reg[43];
  assign PreviousLag_reg_next[45] = PreviousLag_reg[44];
  assign PreviousLag_reg_next[46] = PreviousLag_reg[45];
  assign PreviousLag_reg_next[47] = PreviousLag_reg[46];
  assign PreviousLag_reg_next[48] = PreviousLag_reg[47];
  assign PreviousLag_reg_next[49] = PreviousLag_reg[48];
  assign PreviousLag_reg_next[50] = PreviousLag_reg[49];
  assign PreviousLag_reg_next[51] = PreviousLag_reg[50];
  assign PreviousLag_reg_next[52] = PreviousLag_reg[51];
  assign PreviousLag_reg_next[53] = PreviousLag_reg[52];
  assign PreviousLag_reg_next[54] = PreviousLag_reg[53];
  assign PreviousLag_reg_next[55] = PreviousLag_reg[54];
  assign PreviousLag_reg_next[56] = PreviousLag_reg[55];
  assign PreviousLag_reg_next[57] = PreviousLag_reg[56];
  assign PreviousLag_reg_next[58] = PreviousLag_reg[57];
  assign PreviousLag_reg_next[59] = PreviousLag_reg[58];
  assign PreviousLag_reg_next[60] = PreviousLag_reg[59];
  assign PreviousLag_reg_next[61] = PreviousLag_reg[60];
  assign PreviousLag_reg_next[62] = PreviousLag_reg[61];
  assign PreviousLag_reg_next[63] = PreviousLag_reg[62];
  assign PreviousLag_reg_next[64] = PreviousLag_reg[63];
  assign PreviousLag_reg_next[65] = PreviousLag_reg[64];
  assign PreviousLag_reg_next[66] = PreviousLag_reg[65];
  assign PreviousLag_reg_next[67] = PreviousLag_reg[66];
  assign PreviousLag_reg_next[68] = PreviousLag_reg[67];
  assign PreviousLag_reg_next[69] = PreviousLag_reg[68];
  assign PreviousLag_reg_next[70] = PreviousLag_reg[69];
  assign PreviousLag_reg_next[71] = PreviousLag_reg[70];
  assign PreviousLag_reg_next[72] = PreviousLag_reg[71];
  assign PreviousLag_reg_next[73] = PreviousLag_reg[72];
  assign PreviousLag_reg_next[74] = PreviousLag_reg[73];
  assign PreviousLag_reg_next[75] = PreviousLag_reg[74];
  assign PreviousLag_reg_next[76] = PreviousLag_reg[75];
  assign PreviousLag_reg_next[77] = PreviousLag_reg[76];
  assign PreviousLag_reg_next[78] = PreviousLag_reg[77];
  assign PreviousLag_reg_next[79] = PreviousLag_reg[78];
  assign PreviousLag_reg_next[80] = PreviousLag_reg[79];
  assign PreviousLag_reg_next[81] = PreviousLag_reg[80];
  assign PreviousLag_reg_next[82] = PreviousLag_reg[81];
  assign PreviousLag_reg_next[83] = PreviousLag_reg[82];
  assign PreviousLag_reg_next[84] = PreviousLag_reg[83];
  assign PreviousLag_reg_next[85] = PreviousLag_reg[84];
  assign PreviousLag_reg_next[86] = PreviousLag_reg[85];
  assign PreviousLag_reg_next[87] = PreviousLag_reg[86];
  assign PreviousLag_reg_next[88] = PreviousLag_reg[87];
  assign PreviousLag_reg_next[89] = PreviousLag_reg[88];
  assign PreviousLag_reg_next[90] = PreviousLag_reg[89];
  assign PreviousLag_reg_next[91] = PreviousLag_reg[90];
  assign PreviousLag_reg_next[92] = PreviousLag_reg[91];
  assign PreviousLag_reg_next[93] = PreviousLag_reg[92];
  assign PreviousLag_reg_next[94] = PreviousLag_reg[93];
  assign PreviousLag_reg_next[95] = PreviousLag_reg[94];
  assign PreviousLag_reg_next[96] = PreviousLag_reg[95];
  assign PreviousLag_reg_next[97] = PreviousLag_reg[96];
  assign PreviousLag_reg_next[98] = PreviousLag_reg[97];
  assign PreviousLag_reg_next[99] = PreviousLag_reg[98];



  assign Add6_out1 = Delay1_out1 - PreviousLag_out1;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 34'sh000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Add6_out1;
        end
      end
    end



  assign Add7_add_cast = {Delay3_out1[33], Delay3_out1};
  assign Add7_add_cast_1 = {Delay6_out1[33], Delay6_out1};
  assign Add7_add_temp = Add7_add_cast + Add7_add_cast_1;
  assign Add7_out1 = ((Add7_add_temp[34] == 1'b0) && (Add7_add_temp[33] != 1'b0) ? 34'sh1FFFFFFFF :
              ((Add7_add_temp[34] == 1'b1) && (Add7_add_temp[33] != 1'b1) ? 34'sh200000000 :
              $signed(Add7_add_temp[33:0])));



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 34'sh000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Add7_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg[0] <= 34'sh000000000;
        Delay2_reg[1] <= 34'sh000000000;
        Delay2_reg[2] <= 34'sh000000000;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
          Delay2_reg[2] <= Delay2_reg_next[2];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[2];
  assign Delay2_reg_next[0] = Delay6_out1;
  assign Delay2_reg_next[1] = Delay2_reg[0];
  assign Delay2_reg_next[2] = Delay2_reg[1];



  assign Lag_Sum = Delay2_out1;

endmodule  // Lag_Cells_HDL

