// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SimulinkCFARHDLWorkflowExampleNew\nfp_log10_single.v
// Created: 2023-05-30 17:04:46
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: nfp_log10_single
// Source Path: SimulinkCFARHDLWorkflowExampleNew/CFAR Implementation Model/Alpha HDL/nfp_log10_single
// Hierarchy Level: 2
// 
// {Latency Strategy = "Zero", Denormal Handling = "off"}
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module nfp_log10_single
          (nfp_in,
           nfp_out);


  input   [31:0] nfp_in;  // ufix32
  output  [31:0] nfp_out;  // ufix32


  wire Constant8_out1;  // ufix1
  wire Constant1_out1;  // ufix1
  wire aSign;  // ufix1
  wire [7:0] aExponent;  // ufix8
  wire [22:0] aMantissa;  // ufix23
  wire aSign_1_out1;  // ufix1
  wire aExponent_cfType_Exponent_I_out1;  // ufix1
  wire alphaaExponent_cfType_Exponent_out1;  // ufix1
  wire aExponent_0_out1;  // ufix1
  wire Compare_To_Zero_out1;  // ufix1
  wire [22:0] Constant_out1;  // ufix23
  wire [22:0] Switch_out1;  // ufix23
  wire aMantissa_0_out1;  // ufix1
  wire alphaaExponent_0_aMantissa_out1;  // ufix1
  wire alphaaExponent_cfType_Exponent_out1_1;  // ufix1
  wire alpha1_out1;  // ufix1
  wire [23:0] Bit_Concat1_out1;  // ufix24
  wire alpha0_out1;  // ufix1
  wire [23:0] Bit_Concat_out1;  // ufix24
  wire [23:0] if_Exponent_0_cfType_Exp_out1;  // ufix24
  wire [22:0] BitSlice_out1;  // ufix23
  wire bitsliceget_mant_norm_mant_no_out1;  // ufix1
  wire signed [29:0] C_out1;  // sfix30_En25
  wire [3:0] Constant_out1_1;  // ufix4
  wire [2:0] Constant1_out1_1;  // ufix3
  wire [29:0] Bit_Concat_out1_1;  // ufix30
  wire signed [29:0] DTC_out1;  // sfix30_En25
  wire signed [29:0] if_tmp_out1;  // sfix30_En25
  wire w_1_out1;  // ufix1
  wire [7:0] C_out1_1;  // ufix8
  wire [7:0] if_Exponent_0_out1;  // ufix8
  wire signed [10:0] DTC_out1_1;  // sfix11
  wire signed [10:0] ExponentBias_out1;  // sfix11
  wire signed [31:0] exp_unbiased_cast_cfType_Exp_add_temp;  // sfix32
  wire signed [31:0] exp_unbiased_cast_cfType_Exp_1;  // sfix32
  wire signed [31:0] exp_unbiased_cast_cfType_Exp_2;  // sfix32
  wire signed [10:0] exp_unbiased_cast_cfType_Exp_out1;  // sfix11
  wire signed [10:0] C_out1_2;  // sfix11
  wire signed [10:0] Add_out1;  // sfix11
  wire signed [10:0] if_w_1_out1;  // sfix11
  wire signed [26:0] Constant3_out1;  // sfix27_En25
  wire signed [37:0] Product_mul_temp;  // sfix38_En25
  wire signed [34:0] Product_out1;  // sfix35_En24
  wire Compare_To_Constant1_out1;  // ufix1
  wire [22:0] Constant_out1_2;  // ufix23
  wire [57:0] Bit_Concat_out1_2;  // ufix58
  wire signed [57:0] Data_Type_Conversion_out1;  // sfix58_En47
  wire Compare_To_Constant_out1;  // ufix1
  wire signed [57:0] Constant1_out1_2;  // sfix58_En47
  wire signed [57:0] Switch1_out1;  // sfix58_En47
  wire signed [29:0] bitsll_w_1_out1;  // sfix30_En25
  wire signed [29:0] alpha2_out1;  // sfix30_En25
  wire signed [29:0] w_2_out1;  // sfix30_En25
  wire signed [29:0] if_w_1_1_out1;  // sfix30_En25
  wire [6:0] BitSlice_out1_1;  // ufix7
  wire signed [6:0] reinterpretcast_bitsliceget_w_out1;  // sfix7_En2
  wire w_hat_0_75_out1;  // ufix1
  wire w_hat_0_5_out1;  // ufix1
  wire signed [29:0] bitsll_w_1_out1_1;  // sfix30_En25
  wire signed [29:0] alpha2_out1_1;  // sfix30_En25
  wire signed [29:0] bitsra_w_1_out1;  // sfix30_En25
  wire signed [29:0] alpha2_tmp1_out1;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_5_1_out1;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_1;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_75_1_out1;  // sfix30_En25
  wire [8:0] BitSlice_out1_2;  // ufix9
  wire signed [8:0] reinterpretcast_bitsliceget_w_out1_1;  // sfix9_En4
  wire w_hat_0_75_out1_1;  // ufix1
  wire w_hat_0_5_out1_1;  // ufix1
  wire signed [29:0] bitsll_w_1_out1_2;  // sfix30_En25
  wire signed [29:0] alpha2_out1_2;  // sfix30_En25
  wire signed [29:0] bitsra_w_1_out1_1;  // sfix30_En25
  wire signed [29:0] alpha2_tmp1_out1_1;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_2;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_5_1_out1_1;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_3;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_75_1_out1_1;  // sfix30_En25
  wire [8:0] BitSlice_out1_3;  // ufix9
  wire signed [8:0] reinterpretcast_bitsliceget_w_out1_2;  // sfix9_En4
  wire w_hat_0_75_out1_2;  // ufix1
  wire w_hat_0_5_out1_2;  // ufix1
  wire signed [29:0] bitsll_w_1_out1_3;  // sfix30_En25
  wire signed [29:0] alpha2_out1_3;  // sfix30_En25
  wire signed [29:0] bitsra_w_1_out1_2;  // sfix30_En25
  wire signed [29:0] alpha2_tmp1_out1_2;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_4;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_5_1_out1_2;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_5;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_75_1_out1_2;  // sfix30_En25
  wire [8:0] BitSlice_out1_4;  // ufix9
  wire signed [8:0] reinterpretcast_bitsliceget_w_out1_3;  // sfix9_En4
  wire w_hat_0_75_out1_3;  // ufix1
  wire w_hat_0_5_out1_3;  // ufix1
  wire signed [29:0] bitsll_w_1_out1_4;  // sfix30_En25
  wire signed [29:0] alpha2_out1_4;  // sfix30_En25
  wire signed [29:0] bitsra_w_1_out1_3;  // sfix30_En25
  wire signed [29:0] alpha2_tmp1_out1_3;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_6;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_5_1_out1_3;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_7;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_75_1_out1_3;  // sfix30_En25
  wire [8:0] BitSlice_out1_5;  // ufix9
  wire signed [8:0] reinterpretcast_bitsliceget_w_out1_4;  // sfix9_En4
  wire w_hat_0_75_out1_4;  // ufix1
  wire w_hat_0_5_out1_4;  // ufix1
  wire signed [29:0] bitsll_w_1_out1_5;  // sfix30_En25
  wire signed [29:0] alpha2_out1_5;  // sfix30_En25
  wire signed [29:0] bitsra_w_1_out1_4;  // sfix30_En25
  wire signed [29:0] alpha2_tmp1_out1_4;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_8;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_5_1_out1_4;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_9;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_75_1_out1_4;  // sfix30_En25
  wire [8:0] BitSlice_out1_6;  // ufix9
  wire signed [8:0] reinterpretcast_bitsliceget_w_out1_5;  // sfix9_En4
  wire w_hat_0_75_out1_5;  // ufix1
  wire w_hat_0_5_out1_5;  // ufix1
  wire signed [29:0] bitsll_w_1_out1_6;  // sfix30_En25
  wire signed [29:0] alpha2_out1_6;  // sfix30_En25
  wire signed [29:0] bitsra_w_1_out1_5;  // sfix30_En25
  wire signed [29:0] alpha2_tmp1_out1_5;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_10;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_5_1_out1_5;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_11;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_75_1_out1_5;  // sfix30_En25
  wire [8:0] BitSlice_out1_7;  // ufix9
  wire signed [8:0] reinterpretcast_bitsliceget_w_out1_6;  // sfix9_En4
  wire w_hat_0_75_out1_6;  // ufix1
  wire w_hat_0_5_out1_6;  // ufix1
  wire signed [29:0] bitsll_w_1_out1_7;  // sfix30_En25
  wire signed [29:0] alpha2_out1_7;  // sfix30_En25
  wire signed [29:0] bitsra_w_1_out1_6;  // sfix30_En25
  wire signed [29:0] alpha2_tmp1_out1_6;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_12;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_5_1_out1_6;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_13;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_75_1_out1_6;  // sfix30_En25
  wire [8:0] BitSlice_out1_8;  // ufix9
  wire signed [8:0] reinterpretcast_bitsliceget_w_out1_7;  // sfix9_En4
  wire w_hat_0_75_out1_7;  // ufix1
  wire w_hat_0_5_out1_7;  // ufix1
  wire signed [29:0] bitsll_w_1_out1_8;  // sfix30_En25
  wire signed [29:0] alpha2_out1_8;  // sfix30_En25
  wire signed [29:0] bitsra_w_1_out1_7;  // sfix30_En25
  wire signed [29:0] alpha2_tmp1_out1_7;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_14;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_5_1_out1_7;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_15;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_75_1_out1_7;  // sfix30_En25
  wire [8:0] BitSlice_out1_9;  // ufix9
  wire signed [8:0] reinterpretcast_bitsliceget_w_out1_8;  // sfix9_En4
  wire w_hat_0_75_out1_8;  // ufix1
  wire w_hat_0_5_out1_8;  // ufix1
  wire signed [29:0] bitsll_w_1_out1_9;  // sfix30_En25
  wire signed [29:0] alpha2_out1_9;  // sfix30_En25
  wire signed [29:0] bitsra_w_1_out1_8;  // sfix30_En25
  wire signed [29:0] alpha2_tmp1_out1_8;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_16;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_5_1_out1_8;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_17;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_75_1_out1_8;  // sfix30_En25
  wire [8:0] BitSlice_out1_10;  // ufix9
  wire signed [8:0] reinterpretcast_bitsliceget_w_out1_9;  // sfix9_En4
  wire w_hat_0_75_out1_9;  // ufix1
  wire w_hat_0_5_out1_9;  // ufix1
  wire signed [29:0] bitsll_w_1_out1_10;  // sfix30_En25
  wire signed [29:0] alpha2_out1_10;  // sfix30_En25
  wire signed [29:0] bitsra_w_1_out1_9;  // sfix30_En25
  wire signed [29:0] alpha2_tmp1_out1_9;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_18;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_5_1_out1_9;  // sfix30_En25
  wire signed [29:0] w_tmp2_out1_19;  // sfix30_En25
  wire signed [29:0] if_w_hat_0_75_1_out1_9;  // sfix30_En25
  wire w_0_out1;  // ufix1
  wire signed [31:0] Zero_out1;  // sfix32_En29
  wire signed [31:0] Log10Table_2_out1;  // sfix32_En29
  wire signed [31:0] if_w_hat_0_5_out1;  // sfix32_En29
  wire signed [31:0] Log10MinusTable_2_out1;  // sfix32_En29
  wire signed [31:0] if_w_hat_0_75_out1;  // sfix32_En29
  wire Constant1_out1_3;  // ufix1
  wire [32:0] Bit_Concat1_out1_1;  // ufix33
  wire signed [32:0] reinterpretcast_bitsliceget_w_2_out1;  // sfix33_En30
  wire signed [32:0] Zero_out1_1;  // sfix33_En30
  wire signed [32:0] Log10Table_int32_3_out1;  // sfix33_En30
  wire signed [32:0] if_w_hat_0_5_out1_1;  // sfix33_En30
  wire signed [32:0] Log10MinusTable_int32_3_out1;  // sfix33_En30
  wire signed [32:0] if_w_hat_0_75_out1_1;  // sfix33_En30
  wire signed [32:0] L_Log10Table_3_1_out1;  // sfix33_En30
  wire Constant_out1_3;  // ufix1
  wire [33:0] Bit_Concat_out1_3;  // ufix34
  wire signed [33:0] reinterpretcast_bitsliceget_w_1_out1;  // sfix34_En31
  wire signed [33:0] Zero_out1_2;  // sfix34_En31
  wire signed [33:0] Log10Table_int32_4_out1;  // sfix34_En31
  wire signed [33:0] if_w_hat_0_5_out1_2;  // sfix34_En31
  wire signed [33:0] Log10MinusTable_int32_4_out1;  // sfix34_En31
  wire signed [33:0] if_w_hat_0_75_out1_2;  // sfix34_En31
  wire signed [33:0] L_Log10Table_4_1_out1;  // sfix34_En31
  wire Constant_out1_4;  // ufix1
  wire [34:0] Bit_Concat_out1_4;  // ufix35
  wire signed [34:0] reinterpretcast_bitsliceget_w_1_out1_1;  // sfix35_En32
  wire signed [34:0] Zero_out1_3;  // sfix35_En32
  wire signed [34:0] Log10Table_int32_5_out1;  // sfix35_En32
  wire signed [34:0] if_w_hat_0_5_out1_3;  // sfix35_En32
  wire signed [34:0] Log10MinusTable_int32_5_out1;  // sfix35_En32
  wire signed [34:0] if_w_hat_0_75_out1_3;  // sfix35_En32
  wire signed [34:0] L_Log10Table_5_1_out1;  // sfix35_En32
  wire Constant_out1_5;  // ufix1
  wire [35:0] Bit_Concat_out1_5;  // ufix36
  wire signed [35:0] reinterpretcast_bitsliceget_w_1_out1_2;  // sfix36_En33
  wire signed [35:0] Zero_out1_4;  // sfix36_En33
  wire signed [35:0] Log10Table_int32_6_out1;  // sfix36_En33
  wire signed [35:0] if_w_hat_0_5_out1_4;  // sfix36_En33
  wire signed [35:0] Log10MinusTable_int32_6_out1;  // sfix36_En33
  wire signed [35:0] if_w_hat_0_75_out1_4;  // sfix36_En33
  wire signed [35:0] L_Log10Table_6_1_out1;  // sfix36_En33
  wire Constant_out1_6;  // ufix1
  wire [36:0] Bit_Concat_out1_6;  // ufix37
  wire signed [36:0] reinterpretcast_bitsliceget_w_1_out1_3;  // sfix37_En34
  wire signed [36:0] Zero_out1_5;  // sfix37_En34
  wire signed [36:0] Log10Table_int32_7_out1;  // sfix37_En34
  wire signed [36:0] if_w_hat_0_5_out1_5;  // sfix37_En34
  wire signed [36:0] Log10MinusTable_int32_7_out1;  // sfix37_En34
  wire signed [36:0] if_w_hat_0_75_out1_5;  // sfix37_En34
  wire signed [36:0] L_Log10Table_7_1_out1;  // sfix37_En34
  wire Constant_out1_7;  // ufix1
  wire [37:0] Bit_Concat_out1_7;  // ufix38
  wire signed [37:0] reinterpretcast_bitsliceget_w_1_out1_4;  // sfix38_En35
  wire signed [37:0] Zero_out1_6;  // sfix38_En35
  wire signed [37:0] Log10Table_int32_8_out1;  // sfix38_En35
  wire signed [37:0] if_w_hat_0_5_out1_6;  // sfix38_En35
  wire signed [37:0] Log10MinusTable_int32_8_out1;  // sfix38_En35
  wire signed [37:0] if_w_hat_0_75_out1_6;  // sfix38_En35
  wire signed [37:0] L_Log10Table_9_1_out1;  // sfix38_En35
  wire Constant_out1_8;  // ufix1
  wire [38:0] Bit_Concat_out1_8;  // ufix39
  wire signed [38:0] reinterpretcast_bitsliceget_w_1_out1_5;  // sfix39_En36
  wire signed [38:0] Zero_out1_7;  // sfix39_En36
  wire signed [38:0] Log10Table_int32_9_out1;  // sfix39_En36
  wire signed [38:0] if_w_hat_0_5_out1_7;  // sfix39_En36
  wire signed [38:0] Log10MinusTable_int32_9_out1;  // sfix39_En36
  wire signed [38:0] if_w_hat_0_75_out1_7;  // sfix39_En36
  wire signed [38:0] L_Log10Table_10_1_out1;  // sfix39_En36
  wire Constant_out1_9;  // ufix1
  wire [39:0] Bit_Concat_out1_9;  // ufix40
  wire signed [39:0] reinterpretcast_bitsliceget_w_1_out1_6;  // sfix40_En37
  wire signed [39:0] Zero_out1_8;  // sfix40_En37
  wire signed [39:0] Log10Table_int32_10_out1;  // sfix40_En37
  wire signed [39:0] if_w_hat_0_5_out1_8;  // sfix40_En37
  wire signed [39:0] Log10MinusTable_int32_10_out1;  // sfix40_En37
  wire signed [39:0] if_w_hat_0_75_out1_8;  // sfix40_En37
  wire signed [39:0] L_Log10Table_10_1_out1_1;  // sfix40_En37
  wire Constant_out1_10;  // ufix1
  wire [40:0] Bit_Concat_out1_10;  // ufix41
  wire signed [40:0] reinterpretcast_bitsliceget_w_1_out1_7;  // sfix41_En38
  wire signed [40:0] Zero_out1_9;  // sfix41_En38
  wire signed [40:0] Log10Table_int32_10_out1_1;  // sfix41_En38
  wire signed [40:0] if_w_hat_0_5_out1_9;  // sfix41_En38
  wire signed [40:0] Log10MinusTable_int32_10_out1_1;  // sfix41_En38
  wire signed [40:0] if_w_hat_0_75_out1_9;  // sfix41_En38
  wire signed [40:0] L_Log10Table_10_out1;  // sfix41_En38
  wire [8:0] alpha0_out1_1;  // ufix9
  wire [49:0] Bit_Concat_out1_11;  // ufix50
  wire signed [49:0] reinterpretcast_bitconcat_L_f_out1;  // sfix50_En47
  wire BitSlice_out1_11;  // ufix1
  wire signed [30:0] alphaw_cast;  // sfix31_En25
  wire signed [30:0] alphaw_cast_1;  // sfix31_En25
  wire signed [29:0] alphaw_out1;  // sfix30_En25
  wire signed [29:0] if_sign_1_out1;  // sfix30_En25
  wire w_abs_2_out1;  // ufix1
  wire [25:0] Bit_Slice_out1;  // ufix26
  wire Bit_Slice5_out1;  // ufix1
  wire Bit_Slice3_out1;  // ufix1
  wire Bit_Slice6_out1;  // ufix1
  wire Logical_Operator_out1;  // ufix1
  wire Logical_Operator1_out1;  // ufix1
  wire [7:0] Bit_Slice2_out1;  // ufix8
  wire Bit_Slice7_out1;  // ufix1
  wire Bit_Slice6_out1_1;  // ufix1
  wire Logical_Operator3_out1;  // ufix1
  wire Bit_Slice5_out1_1;  // ufix1
  wire Bit_Slice3_out1_1;  // ufix1
  wire Logical_Operator_out1_1;  // ufix1
  wire Logical_Operator1_out1_1;  // ufix1
  wire Bit_Slice2_out1_1;  // ufix1
  wire Bit_Slice1_out1;  // ufix1
  wire Logical_Operator4_out1;  // ufix1
  wire Bit_Slice_out1_1;  // ufix1
  wire Bit_Slice4_out1;  // ufix1
  wire Logical_Operator2_out1;  // ufix1
  wire Logical_Operator5_out1;  // ufix1
  wire Logical_Operator6_out1;  // ufix1
  wire [7:0] Bit_Slice1_out1_1;  // ufix8
  wire Bit_Slice7_out1_1;  // ufix1
  wire Bit_Slice6_out1_2;  // ufix1
  wire Logical_Operator3_out1_1;  // ufix1
  wire Bit_Slice5_out1_2;  // ufix1
  wire Bit_Slice3_out1_2;  // ufix1
  wire Logical_Operator_out1_2;  // ufix1
  wire Logical_Operator1_out1_2;  // ufix1
  wire Bit_Slice2_out1_2;  // ufix1
  wire Bit_Slice1_out1_2;  // ufix1
  wire Logical_Operator4_out1_1;  // ufix1
  wire Bit_Slice_out1_2;  // ufix1
  wire Bit_Slice4_out1_1;  // ufix1
  wire Logical_Operator2_out1_1;  // ufix1
  wire Logical_Operator5_out1_1;  // ufix1
  wire [6:0] Bit_Slice4_out1_2;  // ufix7
  wire Bit_Slice7_out1_2;  // ufix1
  wire Bit_Slice6_out1_3;  // ufix1
  wire Logical_Operator3_out1_2;  // ufix1
  wire Bit_Slice5_out1_3;  // ufix1
  wire Bit_Slice3_out1_3;  // ufix1
  wire Logical_Operator_out1_3;  // ufix1
  wire Bit_Slice2_out1_3;  // ufix1
  wire Bit_Slice1_out1_3;  // ufix1
  wire Bit_Slice_out1_3;  // ufix1
  wire signed [7:0] Start_out1;  // int8
  wire Logical_Operator4_out1_2;  // ufix1
  wire signed [7:0] Start_1_out1;  // int8
  wire signed [7:0] Switch_out1_1;  // int8
  wire signed [7:0] Start_2_out1;  // int8
  wire signed [7:0] Start_3_out1;  // int8
  wire Logical_Operator1_out1_3;  // ufix1
  wire signed [7:0] Switch2_out1;  // int8
  wire signed [7:0] Switch1_out1_1;  // int8
  wire signed [7:0] Start_4_out1;  // int8
  wire signed [7:0] Start_5_out1;  // int8
  wire signed [7:0] Switch5_out1;  // int8
  wire signed [7:0] Start_6_out1;  // int8
  wire signed [7:0] Start_7_out1;  // int8
  wire signed [7:0] Switch7_out1;  // int8
  wire Logical_Operator6_out1_1;  // ufix1
  wire signed [7:0] Switch6_out1;  // int8
  wire signed [7:0] Switch4_out1;  // int8
  wire signed [7:0] Start_out1_1;  // int8
  wire signed [7:0] Start_1_out1_1;  // int8
  wire signed [7:0] Switch_out1_2;  // int8
  wire signed [7:0] Start_2_out1_1;  // int8
  wire signed [7:0] Start_3_out1_1;  // int8
  wire signed [7:0] Switch2_out1_1;  // int8
  wire signed [7:0] Switch1_out1_2;  // int8
  wire signed [7:0] Start_4_out1_1;  // int8
  wire signed [7:0] Start_5_out1_1;  // int8
  wire signed [7:0] Switch5_out1_1;  // int8
  wire signed [7:0] Start_6_out1_1;  // int8
  wire signed [7:0] Start_7_out1_1;  // int8
  wire signed [7:0] Switch7_out1_1;  // int8
  wire signed [7:0] Switch6_out1_1;  // int8
  wire Logical_Operator2_out1_2;  // ufix1
  wire signed [7:0] Switch4_out1_1;  // int8
  wire signed [7:0] Switch33_out1;  // int8
  wire signed [7:0] Start_out1_2;  // int8
  wire signed [7:0] Start_1_out1_2;  // int8
  wire signed [7:0] Switch_out1_3;  // int8
  wire signed [7:0] Start_2_out1_2;  // int8
  wire signed [7:0] Start_3_out1_2;  // int8
  wire signed [7:0] Switch2_out1_2;  // int8
  wire signed [7:0] Switch1_out1_3;  // int8
  wire signed [7:0] Start_4_out1_2;  // int8
  wire signed [7:0] Start_5_out1_2;  // int8
  wire signed [7:0] Switch5_out1_2;  // int8
  wire signed [7:0] Start_6_out1_2;  // int8
  wire signed [7:0] Start_7_out1_2;  // int8
  wire signed [7:0] Switch7_out1_2;  // int8
  wire signed [7:0] Switch6_out1_2;  // int8
  wire signed [7:0] Switch4_out1_2;  // int8
  wire signed [7:0] alpha24_out1;  // int8
  wire signed [7:0] alpha25_out1;  // int8
  wire signed [7:0] Switch7_out1_3;  // int8
  wire signed [7:0] alpha26_out1;  // int8
  wire signed [7:0] Switch1_out1_4;  // int8
  wire signed [7:0] Switch2_out1_3;  // int8
  wire signed [7:0] Switch34_out1;  // int8
  wire signed [7:0] bitsll_w_abs_j_zerosig;  // int8
  wire signed [7:0] bitsll_w_abs_j_selsig;  // int8
  wire signed [7:0] dynamic_shift_zerosig;  // int8
  wire signed [7:0] dynamic_shift_selsig;  // int8
  wire signed [29:0] bitsll_w_abs_j_out1;  // sfix30_En25
  wire signed [29:0] bitsra_w_abs_1_out1;  // sfix30_En25
  wire signed [29:0] alpha1_out1_1;  // sfix30_En25
  wire signed [29:0] if_w_abs_2_1_out1;  // sfix30_En25
  wire [25:0] BitSlice1_out1;  // ufix26
  wire [25:0] reinterpretcast_bitsliceget_tm_out1;  // ufix26_En25
  wire signed [29:0] bitsra_w_cfType_Log2NumberOfI_out1;  // sfix30_En25
  wire signed [29:0] alpha1_tmp1_out1;  // sfix30_En25
  wire [25:0] BitSlice2_out1;  // ufix26
  wire [25:0] reinterpretcast_bitsliceget_tm_out1_1;  // ufix26_En25
  wire [51:0] tmp_m1_tmp_m2_mul_temp;  // ufix52_En50
  wire [26:0] tmp_m1_tmp_m2_out1;  // ufix27_En25
  wire signed [26:0] Log4rt10E_out1;  // sfix27_En25
  wire signed [26:0] alphaLog4rt10E_out1;  // sfix27_En25
  wire signed [7:0] cfType_Log2NumberOfIterations_out1;  // int8
  wire signed [7:0] C_out1_3;  // int8
  wire signed [7:0] if_w_abs_2_out1;  // int8
  wire signed [7:0] cfType_Log2NumberOfIterations_out1_1;  // int8
  wire signed [7:0] bitsra_appx_shift_zerosig;  // int8
  wire signed [7:0] bitsra_appx_shift_selsig;  // int8
  wire signed [26:0] if_sign_1_out1_1;  // sfix27_En25
  wire signed [27:0] tmp3_Log4rt10E_cast;  // sfix28_En25
  wire signed [54:0] tmp3_Log4rt10E_mul_temp;  // sfix55_En50
  wire signed [53:0] tmp3_Log4rt10E_cast_1;  // sfix54_En50
  wire signed [49:0] tmp3_Log4rt10E_out1;  // sfix50_En47
  wire signed [7:0] dynamic_shift_zerosig_1;  // int8
  wire signed [7:0] dynamic_shift_selsig_1;  // int8
  wire signed [49:0] bitsra_appx_shift_out1;  // sfix50_En47
  wire signed [49:0] L_tmp4_out1;  // sfix50_En47
  wire signed [49:0] if_w_0_out1;  // sfix50_En47
  wire BitSlice_out1_12;  // ufix1
  wire bitget_L_L_WordLength_0_out1;  // ufix1
  wire signed [7:0] alpha1_out1_2;  // int8
  wire signed [7:0] alpha1_out1_3;  // int8
  wire signed [7:0] if_bitget_L_L_WordLength_0_out1;  // int8
  wire signed [57:0] Constant2_out1;  // sfix58_En47
  wire signed [57:0] Switch_out1_4;  // sfix58_En47
  wire [57:0] Bit_Concat1_out1_2;  // ufix58
  wire signed [57:0] reinterpretcast_bitconcat_fi_0_out1;  // sfix58_En47
  wire signed [57:0] exp_tmp_L_out1;  // sfix58_En47
  wire BitSlice_out1_13;  // ufix1
  wire C4_out1;  // ufix1
  wire if_aExponent_0_2_out1;  // ufix1
  wire if_aExponent_cfType_Exponent_2_out1;  // ufix1
  wire Switch1_out1_5;  // ufix1
  wire [7:0] Constant3_out1_1;  // ufix8
  wire signed [58:0] Unary_Minus_cast;  // sfix59_En47
  wire signed [58:0] Unary_Minus_cast_1;  // sfix59_En47
  wire signed [57:0] Unary_Minus_out1;  // sfix58_En47
  wire signed [57:0] Switch_out1_5;  // sfix58_En47
  wire [56:0] BitSlice1_out1_1;  // ufix57
  wire Bit_Slice9_out1;  // ufix1
  wire Bit_Slice8_out1;  // ufix1
  wire Logical_Operator3_out1_3;  // ufix1
  wire [7:0] Bit_Slice7_out1_3;  // ufix8
  wire Bit_Slice7_out1_4;  // ufix1
  wire Bit_Slice6_out1_4;  // ufix1
  wire Logical_Operator3_out1_4;  // ufix1
  wire Bit_Slice5_out1_4;  // ufix1
  wire Bit_Slice3_out1_4;  // ufix1
  wire Logical_Operator_out1_4;  // ufix1
  wire Logical_Operator1_out1_4;  // ufix1
  wire Bit_Slice2_out1_4;  // ufix1
  wire Bit_Slice1_out1_4;  // ufix1
  wire Logical_Operator4_out1_3;  // ufix1
  wire Bit_Slice_out1_4;  // ufix1
  wire Bit_Slice4_out1_3;  // ufix1
  wire Logical_Operator2_out1_3;  // ufix1
  wire Logical_Operator5_out1_2;  // ufix1
  wire Logical_Operator6_out1_2;  // ufix1
  wire Logical_Operator4_out1_4;  // ufix1
  wire [7:0] Bit_Slice6_out1_5;  // ufix8
  wire Bit_Slice7_out1_5;  // ufix1
  wire Bit_Slice6_out1_6;  // ufix1
  wire Logical_Operator3_out1_5;  // ufix1
  wire Bit_Slice5_out1_5;  // ufix1
  wire Bit_Slice3_out1_5;  // ufix1
  wire Logical_Operator_out1_5;  // ufix1
  wire Logical_Operator1_out1_5;  // ufix1
  wire Bit_Slice2_out1_5;  // ufix1
  wire Bit_Slice1_out1_5;  // ufix1
  wire Logical_Operator4_out1_5;  // ufix1
  wire Bit_Slice_out1_5;  // ufix1
  wire Bit_Slice4_out1_4;  // ufix1
  wire Logical_Operator2_out1_4;  // ufix1
  wire Logical_Operator5_out1_3;  // ufix1
  wire Logical_Operator6_out1_3;  // ufix1
  wire [7:0] Bit_Slice5_out1_6;  // ufix8
  wire Bit_Slice7_out1_6;  // ufix1
  wire Bit_Slice6_out1_7;  // ufix1
  wire Logical_Operator3_out1_6;  // ufix1
  wire Bit_Slice5_out1_7;  // ufix1
  wire Bit_Slice3_out1_6;  // ufix1
  wire Logical_Operator_out1_6;  // ufix1
  wire Logical_Operator1_out1_6;  // ufix1
  wire Bit_Slice2_out1_6;  // ufix1
  wire Bit_Slice1_out1_6;  // ufix1
  wire Logical_Operator4_out1_6;  // ufix1
  wire Bit_Slice_out1_6;  // ufix1
  wire Bit_Slice4_out1_5;  // ufix1
  wire Logical_Operator2_out1_5;  // ufix1
  wire Logical_Operator5_out1_4;  // ufix1
  wire Logical_Operator6_out1_4;  // ufix1
  wire Logical_Operator1_out1_7;  // ufix1
  wire [7:0] Bit_Slice3_out1_7;  // ufix8
  wire Bit_Slice7_out1_7;  // ufix1
  wire Bit_Slice6_out1_8;  // ufix1
  wire Logical_Operator3_out1_7;  // ufix1
  wire Bit_Slice5_out1_8;  // ufix1
  wire Bit_Slice3_out1_8;  // ufix1
  wire Logical_Operator_out1_7;  // ufix1
  wire Logical_Operator1_out1_8;  // ufix1
  wire Bit_Slice2_out1_7;  // ufix1
  wire Bit_Slice1_out1_7;  // ufix1
  wire Logical_Operator4_out1_7;  // ufix1
  wire Bit_Slice_out1_7;  // ufix1
  wire Bit_Slice4_out1_6;  // ufix1
  wire Logical_Operator2_out1_6;  // ufix1
  wire Logical_Operator5_out1_5;  // ufix1
  wire Logical_Operator6_out1_5;  // ufix1
  wire [7:0] Bit_Slice2_out1_8;  // ufix8
  wire Bit_Slice7_out1_8;  // ufix1
  wire Bit_Slice6_out1_9;  // ufix1
  wire Logical_Operator3_out1_8;  // ufix1
  wire Bit_Slice5_out1_9;  // ufix1
  wire Bit_Slice3_out1_9;  // ufix1
  wire Logical_Operator_out1_8;  // ufix1
  wire Logical_Operator1_out1_9;  // ufix1
  wire Bit_Slice2_out1_9;  // ufix1
  wire Bit_Slice1_out1_8;  // ufix1
  wire Logical_Operator4_out1_8;  // ufix1
  wire Bit_Slice_out1_8;  // ufix1
  wire Bit_Slice4_out1_7;  // ufix1
  wire Logical_Operator2_out1_7;  // ufix1
  wire Logical_Operator5_out1_6;  // ufix1
  wire Logical_Operator6_out1_6;  // ufix1
  wire [7:0] Bit_Slice1_out1_9;  // ufix8
  wire Bit_Slice7_out1_9;  // ufix1
  wire Bit_Slice6_out1_10;  // ufix1
  wire Logical_Operator3_out1_9;  // ufix1
  wire Bit_Slice5_out1_10;  // ufix1
  wire Bit_Slice3_out1_10;  // ufix1
  wire Logical_Operator_out1_9;  // ufix1
  wire Logical_Operator1_out1_10;  // ufix1
  wire Bit_Slice2_out1_10;  // ufix1
  wire Bit_Slice1_out1_10;  // ufix1
  wire Logical_Operator4_out1_9;  // ufix1
  wire Bit_Slice_out1_9;  // ufix1
  wire Bit_Slice4_out1_8;  // ufix1
  wire Logical_Operator2_out1_8;  // ufix1
  wire Logical_Operator5_out1_7;  // ufix1
  wire [6:0] Bit_Slice4_out1_9;  // ufix7
  wire Bit_Slice7_out1_10;  // ufix1
  wire Bit_Slice6_out1_11;  // ufix1
  wire Logical_Operator3_out1_10;  // ufix1
  wire Bit_Slice5_out1_11;  // ufix1
  wire Bit_Slice3_out1_11;  // ufix1
  wire Logical_Operator_out1_10;  // ufix1
  wire Bit_Slice2_out1_11;  // ufix1
  wire Bit_Slice1_out1_11;  // ufix1
  wire Bit_Slice_out1_10;  // ufix1
  wire signed [7:0] Start_out1_3;  // int8
  wire Logical_Operator4_out1_10;  // ufix1
  wire signed [7:0] Start_1_out1_3;  // int8
  wire signed [7:0] Switch_out1_6;  // int8
  wire signed [7:0] Start_2_out1_3;  // int8
  wire signed [7:0] Start_3_out1_3;  // int8
  wire Logical_Operator1_out1_11;  // ufix1
  wire signed [7:0] Switch2_out1_4;  // int8
  wire signed [7:0] Switch1_out1_6;  // int8
  wire signed [7:0] Start_4_out1_3;  // int8
  wire signed [7:0] Start_5_out1_3;  // int8
  wire signed [7:0] Switch5_out1_3;  // int8
  wire signed [7:0] Start_6_out1_3;  // int8
  wire signed [7:0] Start_7_out1_3;  // int8
  wire signed [7:0] Switch7_out1_4;  // int8
  wire Logical_Operator6_out1_7;  // ufix1
  wire signed [7:0] Switch6_out1_3;  // int8
  wire signed [7:0] Switch4_out1_3;  // int8
  wire signed [7:0] Start_out1_4;  // int8
  wire signed [7:0] Start_1_out1_4;  // int8
  wire signed [7:0] Switch_out1_7;  // int8
  wire signed [7:0] Start_2_out1_4;  // int8
  wire signed [7:0] Start_3_out1_4;  // int8
  wire signed [7:0] Switch2_out1_5;  // int8
  wire signed [7:0] Switch1_out1_7;  // int8
  wire signed [7:0] Start_4_out1_4;  // int8
  wire signed [7:0] Start_5_out1_4;  // int8
  wire signed [7:0] Switch5_out1_4;  // int8
  wire signed [7:0] Start_6_out1_4;  // int8
  wire signed [7:0] Start_7_out1_4;  // int8
  wire signed [7:0] Switch7_out1_5;  // int8
  wire signed [7:0] Switch6_out1_4;  // int8
  wire Logical_Operator2_out1_9;  // ufix1
  wire signed [7:0] Switch4_out1_4;  // int8
  wire signed [7:0] Switch33_out1_1;  // int8
  wire signed [7:0] Start_out1_5;  // int8
  wire signed [7:0] Start_1_out1_5;  // int8
  wire signed [7:0] Switch_out1_8;  // int8
  wire signed [7:0] Start_2_out1_5;  // int8
  wire signed [7:0] Start_3_out1_5;  // int8
  wire signed [7:0] Switch2_out1_6;  // int8
  wire signed [7:0] Switch1_out1_8;  // int8
  wire signed [7:0] Start_4_out1_5;  // int8
  wire signed [7:0] Start_5_out1_5;  // int8
  wire signed [7:0] Switch5_out1_5;  // int8
  wire signed [7:0] Start_6_out1_5;  // int8
  wire signed [7:0] Start_7_out1_5;  // int8
  wire signed [7:0] Switch7_out1_6;  // int8
  wire signed [7:0] Switch6_out1_5;  // int8
  wire signed [7:0] Switch4_out1_5;  // int8
  wire signed [7:0] Start_out1_6;  // int8
  wire signed [7:0] Start_1_out1_6;  // int8
  wire signed [7:0] Switch_out1_9;  // int8
  wire signed [7:0] Start_2_out1_6;  // int8
  wire signed [7:0] Start_3_out1_6;  // int8
  wire signed [7:0] Switch2_out1_7;  // int8
  wire signed [7:0] Switch1_out1_9;  // int8
  wire signed [7:0] Start_4_out1_6;  // int8
  wire signed [7:0] Start_5_out1_6;  // int8
  wire signed [7:0] Switch5_out1_6;  // int8
  wire signed [7:0] Start_6_out1_6;  // int8
  wire signed [7:0] Start_7_out1_6;  // int8
  wire signed [7:0] Switch7_out1_7;  // int8
  wire signed [7:0] Switch6_out1_6;  // int8
  wire signed [7:0] Switch4_out1_6;  // int8
  wire Logical_Operator5_out1_8;  // ufix1
  wire signed [7:0] Switch2_out1_8;  // int8
  wire signed [7:0] Switch34_out1_1;  // int8
  wire signed [7:0] Start_out1_7;  // int8
  wire signed [7:0] Start_1_out1_7;  // int8
  wire signed [7:0] Switch_out1_10;  // int8
  wire signed [7:0] Start_2_out1_7;  // int8
  wire signed [7:0] Start_3_out1_7;  // int8
  wire signed [7:0] Switch2_out1_9;  // int8
  wire signed [7:0] Switch1_out1_10;  // int8
  wire signed [7:0] Start_4_out1_7;  // int8
  wire signed [7:0] Start_5_out1_7;  // int8
  wire signed [7:0] Switch5_out1_7;  // int8
  wire signed [7:0] Start_6_out1_7;  // int8
  wire signed [7:0] Start_7_out1_7;  // int8
  wire signed [7:0] Switch7_out1_8;  // int8
  wire signed [7:0] Switch6_out1_7;  // int8
  wire signed [7:0] Switch4_out1_7;  // int8
  wire signed [7:0] Start_out1_8;  // int8
  wire signed [7:0] Start_1_out1_8;  // int8
  wire signed [7:0] Switch_out1_11;  // int8
  wire signed [7:0] Start_2_out1_8;  // int8
  wire signed [7:0] Start_3_out1_8;  // int8
  wire signed [7:0] Switch2_out1_10;  // int8
  wire signed [7:0] Switch1_out1_11;  // int8
  wire signed [7:0] Start_4_out1_8;  // int8
  wire signed [7:0] Start_5_out1_8;  // int8
  wire signed [7:0] Switch5_out1_8;  // int8
  wire signed [7:0] Start_6_out1_8;  // int8
  wire signed [7:0] Start_7_out1_8;  // int8
  wire signed [7:0] Switch7_out1_9;  // int8
  wire signed [7:0] Switch6_out1_8;  // int8
  wire signed [7:0] Switch4_out1_8;  // int8
  wire signed [7:0] Switch1_out1_12;  // int8
  wire signed [7:0] Start_out1_9;  // int8
  wire signed [7:0] Start_1_out1_9;  // int8
  wire signed [7:0] Switch_out1_12;  // int8
  wire signed [7:0] Start_2_out1_9;  // int8
  wire signed [7:0] Start_3_out1_9;  // int8
  wire signed [7:0] Switch2_out1_11;  // int8
  wire signed [7:0] Switch1_out1_13;  // int8
  wire signed [7:0] Start_4_out1_9;  // int8
  wire signed [7:0] Start_5_out1_9;  // int8
  wire signed [7:0] Switch5_out1_9;  // int8
  wire signed [7:0] Start_6_out1_9;  // int8
  wire signed [7:0] Start_7_out1_9;  // int8
  wire signed [7:0] Switch7_out1_10;  // int8
  wire signed [7:0] Switch6_out1_9;  // int8
  wire signed [7:0] Switch4_out1_9;  // int8
  wire signed [7:0] alpha56_out1;  // int8
  wire signed [7:0] alpha57_out1;  // int8
  wire signed [7:0] Switch7_out1_11;  // int8
  wire signed [7:0] Switch3_out1;  // int8
  wire signed [7:0] Switch4_out1_10;  // int8
  wire signed [7:0] Switch5_out1_10;  // int8
  wire [7:0] DTC_out1_2;  // ufix8
  wire alpha0_out1_2;  // ufix1
  wire [56:0] bitsll_Sum_tmp1_out1;  // ufix57
  wire [23:0] BitSlice2_out1_1;  // ufix24
  wire [24:0] Bit_Concat_out1_12;  // ufix25
  wire BitSlice_out1_14;  // ufix1
  wire BitSlice1_out1_2;  // ufix1
  wire alphabitget_Mant_tmp_2_0_out1;  // ufix1
  wire alphabitget_Mant_tmp_1_0_out1;  // ufix1
  wire [24:0] cast_2_like_Mant_tmp_out1;  // ufix25
  wire [31:0] Mant_tmp_cast_2_like_Man_add_temp;  // ufix32
  wire [31:0] Mant_tmp_cast_2_like_Man_1;  // ufix32
  wire [31:0] Mant_tmp_cast_2_like_Man_2;  // ufix32
  wire [24:0] Mant_tmp_cast_2_like_Man_out1;  // ufix25
  wire [24:0] if_bitget_Mant_tmp_1_0_out1;  // ufix25
  wire BitSlice2_out1_2;  // ufix1
  wire Compare_To_Constant_out1_1;  // ufix1
  wire [7:0] alpha80_out1;  // ufix8
  wire [7:0] alpha80_cast_pos_like_exp_out_out1;  // ufix8
  wire [7:0] alpha80_1_out1;  // ufix8
  wire [7:0] Switch1_out1_14;  // ufix8
  wire [7:0] cast_1_like_Exp_out1;  // ufix8
  wire [7:0] Exp_cast_1_like_Exp_out1;  // ufix8
  wire [7:0] if_bitget_Mant_tmp_Mant_tmp_Wor_out1;  // ufix8
  wire [7:0] C_out1_4;  // ufix8
  wire [7:0] if_aSign_1_out1;  // ufix8
  wire [7:0] C2_out1;  // ufix8
  wire [7:0] if_aExponent_0_out1;  // ufix8
  wire [7:0] if_aExponent_cfType_Exponent_out1;  // ufix8
  wire [7:0] Switch6_out1_10;  // ufix8
  wire [22:0] Constant2_out1_1;  // ufix23
  wire Compare_To_Zero_out1_1;  // ufix1
  wire Logical_Operator_out1_11;  // ufix1
  wire [22:0] BitSlice3_out1;  // ufix23
  wire [22:0] C_out1_5;  // ufix23
  wire [22:0] if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1;  // ufix23
  wire [22:0] C1_out1;  // ufix23
  wire [22:0] if_aSign_1_1_out1;  // ufix23
  wire [22:0] C3_out1;  // ufix23
  wire [22:0] if_aExponent_0_1_out1;  // ufix23
  wire [22:0] if_aExponent_cfType_Exponent_1_out1;  // ufix23
  wire [22:0] Switch5_out1_11;  // ufix23
  wire [31:0] nfp_out_pack;  // ufix32


  assign Constant8_out1 = 1'b1;



  assign Constant1_out1 = 1'b0;



  // Split 32 bit word into FP sign, exponent, mantissa
  assign aSign = nfp_in[31];
  assign aExponent = nfp_in[30:23];
  assign aMantissa = nfp_in[22:0];



  assign aSign_1_out1 = aSign == 1'b1;



  assign aExponent_cfType_Exponent_I_out1 = aExponent == 8'b11111111;



  assign alphaaExponent_cfType_Exponent_out1 = aSign_1_out1 | aExponent_cfType_Exponent_I_out1;



  assign aExponent_0_out1 = aExponent == 8'b00000000;



  assign Compare_To_Zero_out1 = aExponent == 8'b00000000;



  assign Constant_out1 = 23'b00000000000000000000000;



  assign Switch_out1 = (Compare_To_Zero_out1 == 1'b0 ? aMantissa :
              Constant_out1);



  assign aMantissa_0_out1 = Switch_out1 == 23'b00000000000000000000000;



  assign alphaaExponent_0_aMantissa_out1 = aExponent_0_out1 & aMantissa_0_out1;



  assign alphaaExponent_cfType_Exponent_out1_1 = alphaaExponent_cfType_Exponent_out1 | alphaaExponent_0_aMantissa_out1;



  assign alpha1_out1 = 1'b1;



  assign Bit_Concat1_out1 = {alpha1_out1, Switch_out1};



  assign alpha0_out1 = 1'b0;



  assign Bit_Concat_out1 = {alpha0_out1, Switch_out1};



  assign if_Exponent_0_cfType_Exp_out1 = (aExponent_0_out1 == 1'b0 ? Bit_Concat1_out1 :
              Bit_Concat_out1);



  assign BitSlice_out1 = if_Exponent_0_cfType_Exp_out1[22:0];



  assign bitsliceget_mant_norm_mant_no_out1 = BitSlice_out1 != 23'b00000000000000000000000;



  assign C_out1 = 30'sb000000000000000000000000000000;



  assign Constant_out1_1 = 4'b0000;



  assign Constant1_out1_1 = 3'b000;



  assign Bit_Concat_out1_1 = {Constant_out1_1, BitSlice_out1, Constant1_out1_1};



  assign DTC_out1 = Bit_Concat_out1_1;



  assign if_tmp_out1 = (bitsliceget_mant_norm_mant_no_out1 == 1'b0 ? C_out1 :
              DTC_out1);



  assign w_1_out1 = if_tmp_out1 > 30'sb000010000000000000000000000000;



  assign C_out1_1 = 8'b00000001;



  assign if_Exponent_0_out1 = (aExponent_0_out1 == 1'b0 ? aExponent :
              C_out1_1);



  assign DTC_out1_1 = {3'b0, if_Exponent_0_out1};



  assign ExponentBias_out1 = 11'sb11110000001;



  assign exp_unbiased_cast_cfType_Exp_1 = {{21{DTC_out1_1[10]}}, DTC_out1_1};
  assign exp_unbiased_cast_cfType_Exp_2 = {{21{ExponentBias_out1[10]}}, ExponentBias_out1};
  assign exp_unbiased_cast_cfType_Exp_add_temp = exp_unbiased_cast_cfType_Exp_1 + exp_unbiased_cast_cfType_Exp_2;
  assign exp_unbiased_cast_cfType_Exp_out1 = exp_unbiased_cast_cfType_Exp_add_temp[10:0];



  assign C_out1_2 = 11'sb00000000001;



  assign Add_out1 = C_out1_2 + exp_unbiased_cast_cfType_Exp_out1;



  assign if_w_1_out1 = (w_1_out1 == 1'b0 ? exp_unbiased_cast_cfType_Exp_out1 :
              Add_out1);



  assign Constant3_out1 = 27'sb010011010001000001001101010;



  assign Product_mul_temp = if_w_1_out1 * Constant3_out1;
  assign Product_out1 = Product_mul_temp[35:1];



  assign Compare_To_Constant1_out1 = if_w_1_out1 == 11'sb11111111111;



  assign Constant_out1_2 = 23'b00000000000000000000000;



  assign Bit_Concat_out1_2 = {Product_out1, Constant_out1_2};



  assign Data_Type_Conversion_out1 = Bit_Concat_out1_2;



  assign Compare_To_Constant_out1 = if_w_1_out1 == 11'sb00000000001;



  assign Constant1_out1_2 = 58'sh3FF65DF657B0430;



  assign Switch1_out1 = (Compare_To_Constant1_out1 == 1'b0 ? Data_Type_Conversion_out1 :
              Constant1_out1_2);



  assign bitsll_w_1_out1 = if_tmp_out1 <<< 8'd1;



  assign alpha2_out1 = 30'sb111100000000000000000000000000;



  assign w_2_out1 = if_tmp_out1 + alpha2_out1;



  assign if_w_1_1_out1 = (w_1_out1 == 1'b0 ? bitsll_w_1_out1 :
              w_2_out1);



  assign BitSlice_out1_1 = if_w_1_1_out1[29:23];



  assign reinterpretcast_bitsliceget_w_out1 = BitSlice_out1_1;



  assign w_hat_0_75_out1 = reinterpretcast_bitsliceget_w_out1 >= 7'sb0000011;



  assign w_hat_0_5_out1 = reinterpretcast_bitsliceget_w_out1 < 7'sb1111110;



  assign bitsll_w_1_out1_1 = if_w_1_1_out1 <<< 8'd1;



  assign alpha2_out1_1 = 30'sb000100000000000000000000000000;



  assign bitsra_w_1_out1 = if_w_1_1_out1 >>> 8'd1;



  assign alpha2_tmp1_out1 = alpha2_out1_1 + bitsra_w_1_out1;



  assign w_tmp2_out1 = bitsll_w_1_out1_1 + alpha2_tmp1_out1;



  assign if_w_hat_0_5_1_out1 = (w_hat_0_5_out1 == 1'b0 ? bitsll_w_1_out1_1 :
              w_tmp2_out1);



  assign w_tmp2_out1_1 = bitsll_w_1_out1_1 - alpha2_tmp1_out1;



  assign if_w_hat_0_75_1_out1 = (w_hat_0_75_out1 == 1'b0 ? if_w_hat_0_5_1_out1 :
              w_tmp2_out1_1);



  assign BitSlice_out1_2 = if_w_hat_0_75_1_out1[29:21];



  assign reinterpretcast_bitsliceget_w_out1_1 = BitSlice_out1_2;



  assign w_hat_0_75_out1_1 = reinterpretcast_bitsliceget_w_out1_1 > 9'sb000001000;



  assign w_hat_0_5_out1_1 = reinterpretcast_bitsliceget_w_out1_1 < 9'sb111111000;



  assign bitsll_w_1_out1_2 = if_w_hat_0_75_1_out1 <<< 8'd1;



  assign alpha2_out1_2 = 30'sb000100000000000000000000000000;



  assign bitsra_w_1_out1_1 = if_w_hat_0_75_1_out1 >>> 8'd2;



  assign alpha2_tmp1_out1_1 = alpha2_out1_2 + bitsra_w_1_out1_1;



  assign w_tmp2_out1_2 = bitsll_w_1_out1_2 + alpha2_tmp1_out1_1;



  assign if_w_hat_0_5_1_out1_1 = (w_hat_0_5_out1_1 == 1'b0 ? bitsll_w_1_out1_2 :
              w_tmp2_out1_2);



  assign w_tmp2_out1_3 = bitsll_w_1_out1_2 - alpha2_tmp1_out1_1;



  assign if_w_hat_0_75_1_out1_1 = (w_hat_0_75_out1_1 == 1'b0 ? if_w_hat_0_5_1_out1_1 :
              w_tmp2_out1_3);



  assign BitSlice_out1_3 = if_w_hat_0_75_1_out1_1[29:21];



  assign reinterpretcast_bitsliceget_w_out1_2 = BitSlice_out1_3;



  assign w_hat_0_75_out1_2 = reinterpretcast_bitsliceget_w_out1_2 > 9'sb000001000;



  assign w_hat_0_5_out1_2 = reinterpretcast_bitsliceget_w_out1_2 < 9'sb111111000;



  assign bitsll_w_1_out1_3 = if_w_hat_0_75_1_out1_1 <<< 8'd1;



  assign alpha2_out1_3 = 30'sb000100000000000000000000000000;



  assign bitsra_w_1_out1_2 = if_w_hat_0_75_1_out1_1 >>> 8'd3;



  assign alpha2_tmp1_out1_2 = alpha2_out1_3 + bitsra_w_1_out1_2;



  assign w_tmp2_out1_4 = bitsll_w_1_out1_3 + alpha2_tmp1_out1_2;



  assign if_w_hat_0_5_1_out1_2 = (w_hat_0_5_out1_2 == 1'b0 ? bitsll_w_1_out1_3 :
              w_tmp2_out1_4);



  assign w_tmp2_out1_5 = bitsll_w_1_out1_3 - alpha2_tmp1_out1_2;



  assign if_w_hat_0_75_1_out1_2 = (w_hat_0_75_out1_2 == 1'b0 ? if_w_hat_0_5_1_out1_2 :
              w_tmp2_out1_5);



  assign BitSlice_out1_4 = if_w_hat_0_75_1_out1_2[29:21];



  assign reinterpretcast_bitsliceget_w_out1_3 = BitSlice_out1_4;



  assign w_hat_0_75_out1_3 = reinterpretcast_bitsliceget_w_out1_3 > 9'sb000001000;



  assign w_hat_0_5_out1_3 = reinterpretcast_bitsliceget_w_out1_3 < 9'sb111111000;



  assign bitsll_w_1_out1_4 = if_w_hat_0_75_1_out1_2 <<< 8'd1;



  assign alpha2_out1_4 = 30'sb000100000000000000000000000000;



  assign bitsra_w_1_out1_3 = if_w_hat_0_75_1_out1_2 >>> 8'd4;



  assign alpha2_tmp1_out1_3 = alpha2_out1_4 + bitsra_w_1_out1_3;



  assign w_tmp2_out1_6 = bitsll_w_1_out1_4 + alpha2_tmp1_out1_3;



  assign if_w_hat_0_5_1_out1_3 = (w_hat_0_5_out1_3 == 1'b0 ? bitsll_w_1_out1_4 :
              w_tmp2_out1_6);



  assign w_tmp2_out1_7 = bitsll_w_1_out1_4 - alpha2_tmp1_out1_3;



  assign if_w_hat_0_75_1_out1_3 = (w_hat_0_75_out1_3 == 1'b0 ? if_w_hat_0_5_1_out1_3 :
              w_tmp2_out1_7);



  assign BitSlice_out1_5 = if_w_hat_0_75_1_out1_3[29:21];



  assign reinterpretcast_bitsliceget_w_out1_4 = BitSlice_out1_5;



  assign w_hat_0_75_out1_4 = reinterpretcast_bitsliceget_w_out1_4 > 9'sb000001000;



  assign w_hat_0_5_out1_4 = reinterpretcast_bitsliceget_w_out1_4 < 9'sb111111000;



  assign bitsll_w_1_out1_5 = if_w_hat_0_75_1_out1_3 <<< 8'd1;



  assign alpha2_out1_5 = 30'sb000100000000000000000000000000;



  assign bitsra_w_1_out1_4 = if_w_hat_0_75_1_out1_3 >>> 8'd5;



  assign alpha2_tmp1_out1_4 = alpha2_out1_5 + bitsra_w_1_out1_4;



  assign w_tmp2_out1_8 = bitsll_w_1_out1_5 + alpha2_tmp1_out1_4;



  assign if_w_hat_0_5_1_out1_4 = (w_hat_0_5_out1_4 == 1'b0 ? bitsll_w_1_out1_5 :
              w_tmp2_out1_8);



  assign w_tmp2_out1_9 = bitsll_w_1_out1_5 - alpha2_tmp1_out1_4;



  assign if_w_hat_0_75_1_out1_4 = (w_hat_0_75_out1_4 == 1'b0 ? if_w_hat_0_5_1_out1_4 :
              w_tmp2_out1_9);



  assign BitSlice_out1_6 = if_w_hat_0_75_1_out1_4[29:21];



  assign reinterpretcast_bitsliceget_w_out1_5 = BitSlice_out1_6;



  assign w_hat_0_75_out1_5 = reinterpretcast_bitsliceget_w_out1_5 > 9'sb000001000;



  assign w_hat_0_5_out1_5 = reinterpretcast_bitsliceget_w_out1_5 < 9'sb111111000;



  assign bitsll_w_1_out1_6 = if_w_hat_0_75_1_out1_4 <<< 8'd1;



  assign alpha2_out1_6 = 30'sb000100000000000000000000000000;



  assign bitsra_w_1_out1_5 = if_w_hat_0_75_1_out1_4 >>> 8'd6;



  assign alpha2_tmp1_out1_5 = alpha2_out1_6 + bitsra_w_1_out1_5;



  assign w_tmp2_out1_10 = bitsll_w_1_out1_6 + alpha2_tmp1_out1_5;



  assign if_w_hat_0_5_1_out1_5 = (w_hat_0_5_out1_5 == 1'b0 ? bitsll_w_1_out1_6 :
              w_tmp2_out1_10);



  assign w_tmp2_out1_11 = bitsll_w_1_out1_6 - alpha2_tmp1_out1_5;



  assign if_w_hat_0_75_1_out1_5 = (w_hat_0_75_out1_5 == 1'b0 ? if_w_hat_0_5_1_out1_5 :
              w_tmp2_out1_11);



  assign BitSlice_out1_7 = if_w_hat_0_75_1_out1_5[29:21];



  assign reinterpretcast_bitsliceget_w_out1_6 = BitSlice_out1_7;



  assign w_hat_0_75_out1_6 = reinterpretcast_bitsliceget_w_out1_6 > 9'sb000001000;



  assign w_hat_0_5_out1_6 = reinterpretcast_bitsliceget_w_out1_6 < 9'sb111111000;



  assign bitsll_w_1_out1_7 = if_w_hat_0_75_1_out1_5 <<< 8'd1;



  assign alpha2_out1_7 = 30'sb000100000000000000000000000000;



  assign bitsra_w_1_out1_6 = if_w_hat_0_75_1_out1_5 >>> 8'd7;



  assign alpha2_tmp1_out1_6 = alpha2_out1_7 + bitsra_w_1_out1_6;



  assign w_tmp2_out1_12 = bitsll_w_1_out1_7 + alpha2_tmp1_out1_6;



  assign if_w_hat_0_5_1_out1_6 = (w_hat_0_5_out1_6 == 1'b0 ? bitsll_w_1_out1_7 :
              w_tmp2_out1_12);



  assign w_tmp2_out1_13 = bitsll_w_1_out1_7 - alpha2_tmp1_out1_6;



  assign if_w_hat_0_75_1_out1_6 = (w_hat_0_75_out1_6 == 1'b0 ? if_w_hat_0_5_1_out1_6 :
              w_tmp2_out1_13);



  assign BitSlice_out1_8 = if_w_hat_0_75_1_out1_6[29:21];



  assign reinterpretcast_bitsliceget_w_out1_7 = BitSlice_out1_8;



  assign w_hat_0_75_out1_7 = reinterpretcast_bitsliceget_w_out1_7 > 9'sb000001000;



  assign w_hat_0_5_out1_7 = reinterpretcast_bitsliceget_w_out1_7 < 9'sb111111000;



  assign bitsll_w_1_out1_8 = if_w_hat_0_75_1_out1_6 <<< 8'd1;



  assign alpha2_out1_8 = 30'sb000100000000000000000000000000;



  assign bitsra_w_1_out1_7 = if_w_hat_0_75_1_out1_6 >>> 8'd8;



  assign alpha2_tmp1_out1_7 = alpha2_out1_8 + bitsra_w_1_out1_7;



  assign w_tmp2_out1_14 = bitsll_w_1_out1_8 + alpha2_tmp1_out1_7;



  assign if_w_hat_0_5_1_out1_7 = (w_hat_0_5_out1_7 == 1'b0 ? bitsll_w_1_out1_8 :
              w_tmp2_out1_14);



  assign w_tmp2_out1_15 = bitsll_w_1_out1_8 - alpha2_tmp1_out1_7;



  assign if_w_hat_0_75_1_out1_7 = (w_hat_0_75_out1_7 == 1'b0 ? if_w_hat_0_5_1_out1_7 :
              w_tmp2_out1_15);



  assign BitSlice_out1_9 = if_w_hat_0_75_1_out1_7[29:21];



  assign reinterpretcast_bitsliceget_w_out1_8 = BitSlice_out1_9;



  assign w_hat_0_75_out1_8 = reinterpretcast_bitsliceget_w_out1_8 > 9'sb000001000;



  assign w_hat_0_5_out1_8 = reinterpretcast_bitsliceget_w_out1_8 < 9'sb111111000;



  assign bitsll_w_1_out1_9 = if_w_hat_0_75_1_out1_7 <<< 8'd1;



  assign alpha2_out1_9 = 30'sb000100000000000000000000000000;



  assign bitsra_w_1_out1_8 = if_w_hat_0_75_1_out1_7 >>> 8'd9;



  assign alpha2_tmp1_out1_8 = alpha2_out1_9 + bitsra_w_1_out1_8;



  assign w_tmp2_out1_16 = bitsll_w_1_out1_9 + alpha2_tmp1_out1_8;



  assign if_w_hat_0_5_1_out1_8 = (w_hat_0_5_out1_8 == 1'b0 ? bitsll_w_1_out1_9 :
              w_tmp2_out1_16);



  assign w_tmp2_out1_17 = bitsll_w_1_out1_9 - alpha2_tmp1_out1_8;



  assign if_w_hat_0_75_1_out1_8 = (w_hat_0_75_out1_8 == 1'b0 ? if_w_hat_0_5_1_out1_8 :
              w_tmp2_out1_17);



  assign BitSlice_out1_10 = if_w_hat_0_75_1_out1_8[29:21];



  assign reinterpretcast_bitsliceget_w_out1_9 = BitSlice_out1_10;



  assign w_hat_0_75_out1_9 = reinterpretcast_bitsliceget_w_out1_9 > 9'sb000001000;



  assign w_hat_0_5_out1_9 = reinterpretcast_bitsliceget_w_out1_9 < 9'sb111111000;



  assign bitsll_w_1_out1_10 = if_w_hat_0_75_1_out1_8 <<< 8'd1;



  assign alpha2_out1_10 = 30'sb000100000000000000000000000000;



  assign bitsra_w_1_out1_9 = if_w_hat_0_75_1_out1_8 >>> 8'd10;



  assign alpha2_tmp1_out1_9 = alpha2_out1_10 + bitsra_w_1_out1_9;



  assign w_tmp2_out1_18 = bitsll_w_1_out1_10 + alpha2_tmp1_out1_9;



  assign if_w_hat_0_5_1_out1_9 = (w_hat_0_5_out1_9 == 1'b0 ? bitsll_w_1_out1_10 :
              w_tmp2_out1_18);



  assign w_tmp2_out1_19 = bitsll_w_1_out1_10 - alpha2_tmp1_out1_9;



  assign if_w_hat_0_75_1_out1_9 = (w_hat_0_75_out1_9 == 1'b0 ? if_w_hat_0_5_1_out1_9 :
              w_tmp2_out1_19);



  assign w_0_out1 = if_w_hat_0_75_1_out1_9 != 30'sb000000000000000000000000000000;



  assign Zero_out1 = 32'sb00000000000000000000000000000000;



  assign Log10Table_2_out1 = 32'sb00001100011001111000110000011100;



  assign if_w_hat_0_5_out1 = (w_hat_0_5_out1 == 1'b0 ? Zero_out1 :
              Log10Table_2_out1);



  assign Log10MinusTable_2_out1 = 32'sb11110000000000100000000111101010;



  assign if_w_hat_0_75_out1 = (w_hat_0_75_out1 == 1'b0 ? if_w_hat_0_5_out1 :
              Log10MinusTable_2_out1);



  assign Constant1_out1_3 = 1'b0;



  assign Bit_Concat1_out1_1 = {if_w_hat_0_75_out1, Constant1_out1_3};



  assign reinterpretcast_bitsliceget_w_2_out1 = Bit_Concat1_out1_1;



  assign Zero_out1_1 = 33'sh000000000;



  assign Log10Table_int32_3_out1 = 33'sh00D1854EB;



  assign if_w_hat_0_5_out1_1 = (w_hat_0_5_out1_1 == 1'b0 ? Zero_out1_1 :
              Log10Table_int32_3_out1);



  assign Log10MinusTable_int32_3_out1 = 33'sh1F1277094;



  assign if_w_hat_0_75_out1_1 = (w_hat_0_75_out1_1 == 1'b0 ? if_w_hat_0_5_out1_1 :
              Log10MinusTable_int32_3_out1);



  assign L_Log10Table_3_1_out1 = reinterpretcast_bitsliceget_w_2_out1 + if_w_hat_0_75_out1_1;



  assign Constant_out1_3 = 1'b0;



  assign Bit_Concat_out1_3 = {L_Log10Table_3_1_out1, Constant_out1_3};



  assign reinterpretcast_bitsliceget_w_1_out1 = Bit_Concat_out1_3;



  assign Zero_out1_2 = 34'sh000000000;



  assign Log10Table_int32_4_out1 = 34'sh00D7AFC96;



  assign if_w_hat_0_5_out1_2 = (w_hat_0_5_out1_2 == 1'b0 ? Zero_out1_2 :
              Log10Table_int32_4_out1);



  assign Log10MinusTable_int32_4_out1 = 34'sh3F1A6381A;



  assign if_w_hat_0_75_out1_2 = (w_hat_0_75_out1_2 == 1'b0 ? if_w_hat_0_5_out1_2 :
              Log10MinusTable_int32_4_out1);



  assign L_Log10Table_4_1_out1 = reinterpretcast_bitsliceget_w_1_out1 + if_w_hat_0_75_out1_2;



  assign Constant_out1_4 = 1'b0;



  assign Bit_Concat_out1_4 = {L_Log10Table_4_1_out1, Constant_out1_4};



  assign reinterpretcast_bitsliceget_w_1_out1_1 = Bit_Concat_out1_4;



  assign Zero_out1_3 = 35'sh000000000;



  assign Log10Table_int32_5_out1 = 35'sh00DAF4847;



  assign if_w_hat_0_5_out1_3 = (w_hat_0_5_out1_3 == 1'b0 ? Zero_out1_3 :
              Log10Table_int32_5_out1);



  assign Log10MinusTable_int32_5_out1 = 35'sh7F1E17BE4;



  assign if_w_hat_0_75_out1_3 = (w_hat_0_75_out1_3 == 1'b0 ? if_w_hat_0_5_out1_3 :
              Log10MinusTable_int32_5_out1);



  assign L_Log10Table_5_1_out1 = reinterpretcast_bitsliceget_w_1_out1_1 + if_w_hat_0_75_out1_3;



  assign Constant_out1_5 = 1'b0;



  assign Bit_Concat_out1_5 = {L_Log10Table_5_1_out1, Constant_out1_5};



  assign reinterpretcast_bitsliceget_w_1_out1_2 = Bit_Concat_out1_5;



  assign Zero_out1_4 = 36'sh000000000;



  assign Log10Table_int32_6_out1 = 36'sh00DCA3B52;



  assign if_w_hat_0_5_out1_4 = (w_hat_0_5_out1_4 == 1'b0 ? Zero_out1_4 :
              Log10Table_int32_6_out1);



  assign Log10MinusTable_int32_6_out1 = 36'shFF1FE2BFB;



  assign if_w_hat_0_75_out1_4 = (w_hat_0_75_out1_4 == 1'b0 ? if_w_hat_0_5_out1_4 :
              Log10MinusTable_int32_6_out1);



  assign L_Log10Table_6_1_out1 = reinterpretcast_bitsliceget_w_1_out1_2 + if_w_hat_0_75_out1_4;



  assign Constant_out1_6 = 1'b0;



  assign Bit_Concat_out1_6 = {L_Log10Table_6_1_out1, Constant_out1_6};



  assign reinterpretcast_bitsliceget_w_1_out1_3 = Bit_Concat_out1_6;



  assign Zero_out1_5 = 37'sh0000000000;



  assign Log10Table_int32_7_out1 = 37'sh000DD7EA39;



  assign if_w_hat_0_5_out1_5 = (w_hat_0_5_out1_5 == 1'b0 ? Zero_out1_5 :
              Log10Table_int32_7_out1);



  assign Log10MinusTable_int32_7_out1 = 37'sh1FF20C4A14;



  assign if_w_hat_0_75_out1_5 = (w_hat_0_75_out1_5 == 1'b0 ? if_w_hat_0_5_out1_5 :
              Log10MinusTable_int32_7_out1);



  assign L_Log10Table_7_1_out1 = reinterpretcast_bitsliceget_w_1_out1_3 + if_w_hat_0_75_out1_5;



  assign Constant_out1_7 = 1'b0;



  assign Bit_Concat_out1_7 = {L_Log10Table_7_1_out1, Constant_out1_7};



  assign reinterpretcast_bitsliceget_w_1_out1_4 = Bit_Concat_out1_7;



  assign Zero_out1_6 = 38'sh0000000000;



  assign Log10Table_int32_8_out1 = 38'sh000DDECF4A;



  assign if_w_hat_0_5_out1_6 = (w_hat_0_5_out1_6 == 1'b0 ? Zero_out1_6 :
              Log10Table_int32_8_out1);



  assign Log10MinusTable_int32_8_out1 = 38'sh3FF2134AF1;



  assign if_w_hat_0_75_out1_6 = (w_hat_0_75_out1_6 == 1'b0 ? if_w_hat_0_5_out1_6 :
              Log10MinusTable_int32_8_out1);



  assign L_Log10Table_9_1_out1 = reinterpretcast_bitsliceget_w_1_out1_4 + if_w_hat_0_75_out1_6;



  assign Constant_out1_8 = 1'b0;



  assign Bit_Concat_out1_8 = {L_Log10Table_9_1_out1, Constant_out1_8};



  assign reinterpretcast_bitsliceget_w_1_out1_5 = Bit_Concat_out1_8;



  assign Zero_out1_7 = 39'sh0000000000;



  assign Log10Table_int32_9_out1 = 39'sh000DE24543;



  assign if_w_hat_0_5_out1_7 = (w_hat_0_5_out1_7 == 1'b0 ? Zero_out1_7 :
              Log10Table_int32_9_out1);



  assign Log10MinusTable_int32_9_out1 = 39'sh7FF216C7DD;



  assign if_w_hat_0_75_out1_7 = (w_hat_0_75_out1_7 == 1'b0 ? if_w_hat_0_5_out1_7 :
              Log10MinusTable_int32_9_out1);



  assign L_Log10Table_10_1_out1 = reinterpretcast_bitsliceget_w_1_out1_5 + if_w_hat_0_75_out1_7;



  assign Constant_out1_9 = 1'b0;



  assign Bit_Concat_out1_9 = {L_Log10Table_10_1_out1, Constant_out1_9};



  assign reinterpretcast_bitsliceget_w_1_out1_6 = Bit_Concat_out1_9;



  assign Zero_out1_8 = 40'sh0000000000;



  assign Log10Table_int32_10_out1 = 40'sh000DE4011D;



  assign if_w_hat_0_5_out1_8 = (w_hat_0_5_out1_8 == 1'b0 ? Zero_out1_8 :
              Log10Table_int32_10_out1);



  assign Log10MinusTable_int32_10_out1 = 40'shFFF2188574;



  assign if_w_hat_0_75_out1_8 = (w_hat_0_75_out1_8 == 1'b0 ? if_w_hat_0_5_out1_8 :
              Log10MinusTable_int32_10_out1);



  assign L_Log10Table_10_1_out1_1 = reinterpretcast_bitsliceget_w_1_out1_6 + if_w_hat_0_75_out1_8;



  assign Constant_out1_10 = 1'b0;



  assign Bit_Concat_out1_10 = {L_Log10Table_10_1_out1_1, Constant_out1_10};



  assign reinterpretcast_bitsliceget_w_1_out1_7 = Bit_Concat_out1_10;



  assign Zero_out1_9 = 41'sh00000000000;



  assign Log10Table_int32_10_out1_1 = 41'sh0000DE4DF41;



  assign if_w_hat_0_5_out1_9 = (w_hat_0_5_out1_9 == 1'b0 ? Zero_out1_9 :
              Log10Table_int32_10_out1_1);



  assign Log10MinusTable_int32_10_out1_1 = 41'sh1FFF2196407;



  assign if_w_hat_0_75_out1_9 = (w_hat_0_75_out1_9 == 1'b0 ? if_w_hat_0_5_out1_9 :
              Log10MinusTable_int32_10_out1_1);



  assign L_Log10Table_10_out1 = reinterpretcast_bitsliceget_w_1_out1_7 + if_w_hat_0_75_out1_9;



  assign alpha0_out1_1 = 9'b000000000;



  assign Bit_Concat_out1_11 = {L_Log10Table_10_out1, alpha0_out1_1};



  assign reinterpretcast_bitconcat_L_f_out1 = Bit_Concat_out1_11;



  assign BitSlice_out1_11 = if_w_hat_0_75_1_out1_9[29];



  assign alphaw_cast = {if_w_hat_0_75_1_out1_9[29], if_w_hat_0_75_1_out1_9};
  assign alphaw_cast_1 =  - (alphaw_cast);
  assign alphaw_out1 = alphaw_cast_1[29:0];



  assign if_sign_1_out1 = (BitSlice_out1_11 == 1'b0 ? if_w_hat_0_75_1_out1_9 :
              alphaw_out1);



  assign w_abs_2_out1 = if_sign_1_out1 >= 30'sb000100000000000000000000000000;



  assign Bit_Slice_out1 = if_sign_1_out1[25:0];



  assign Bit_Slice5_out1 = Bit_Slice_out1[25];



  assign Bit_Slice3_out1 = Bit_Slice_out1[24];



  assign Bit_Slice6_out1 = Bit_Slice_out1[23];



  assign Logical_Operator_out1 = Bit_Slice3_out1 | Bit_Slice6_out1;



  assign Logical_Operator1_out1 = Bit_Slice5_out1 | Logical_Operator_out1;



  assign Bit_Slice2_out1 = Bit_Slice_out1[22:15];



  assign Bit_Slice7_out1 = Bit_Slice2_out1[7];



  assign Bit_Slice6_out1_1 = Bit_Slice2_out1[6];



  assign Logical_Operator3_out1 = Bit_Slice7_out1 | Bit_Slice6_out1_1;



  assign Bit_Slice5_out1_1 = Bit_Slice2_out1[5];



  assign Bit_Slice3_out1_1 = Bit_Slice2_out1[4];



  assign Logical_Operator_out1_1 = Bit_Slice5_out1_1 | Bit_Slice3_out1_1;



  assign Logical_Operator1_out1_1 = Logical_Operator3_out1 | Logical_Operator_out1_1;



  assign Bit_Slice2_out1_1 = Bit_Slice2_out1[3];



  assign Bit_Slice1_out1 = Bit_Slice2_out1[2];



  assign Logical_Operator4_out1 = Bit_Slice2_out1_1 | Bit_Slice1_out1;



  assign Bit_Slice_out1_1 = Bit_Slice2_out1[1];



  assign Bit_Slice4_out1 = Bit_Slice2_out1[0];



  assign Logical_Operator2_out1 = Bit_Slice_out1_1 | Bit_Slice4_out1;



  assign Logical_Operator5_out1 = Logical_Operator4_out1 | Logical_Operator2_out1;



  assign Logical_Operator6_out1 = Logical_Operator1_out1_1 | Logical_Operator5_out1;



  assign Bit_Slice1_out1_1 = Bit_Slice_out1[14:7];



  assign Bit_Slice7_out1_1 = Bit_Slice1_out1_1[7];



  assign Bit_Slice6_out1_2 = Bit_Slice1_out1_1[6];



  assign Logical_Operator3_out1_1 = Bit_Slice7_out1_1 | Bit_Slice6_out1_2;



  assign Bit_Slice5_out1_2 = Bit_Slice1_out1_1[5];



  assign Bit_Slice3_out1_2 = Bit_Slice1_out1_1[4];



  assign Logical_Operator_out1_2 = Bit_Slice5_out1_2 | Bit_Slice3_out1_2;



  assign Logical_Operator1_out1_2 = Logical_Operator3_out1_1 | Logical_Operator_out1_2;



  assign Bit_Slice2_out1_2 = Bit_Slice1_out1_1[3];



  assign Bit_Slice1_out1_2 = Bit_Slice1_out1_1[2];



  assign Logical_Operator4_out1_1 = Bit_Slice2_out1_2 | Bit_Slice1_out1_2;



  assign Bit_Slice_out1_2 = Bit_Slice1_out1_1[1];



  assign Bit_Slice4_out1_1 = Bit_Slice1_out1_1[0];



  assign Logical_Operator2_out1_1 = Bit_Slice_out1_2 | Bit_Slice4_out1_1;



  assign Logical_Operator5_out1_1 = Logical_Operator4_out1_1 | Logical_Operator2_out1_1;



  assign Bit_Slice4_out1_2 = Bit_Slice_out1[6:0];



  assign Bit_Slice7_out1_2 = Bit_Slice4_out1_2[6];



  assign Bit_Slice6_out1_3 = Bit_Slice4_out1_2[5];



  assign Logical_Operator3_out1_2 = Bit_Slice7_out1_2 | Bit_Slice6_out1_3;



  assign Bit_Slice5_out1_3 = Bit_Slice4_out1_2[4];



  assign Bit_Slice3_out1_3 = Bit_Slice4_out1_2[3];



  assign Logical_Operator_out1_3 = Bit_Slice5_out1_3 | Bit_Slice3_out1_3;



  assign Bit_Slice2_out1_3 = Bit_Slice4_out1_2[2];



  assign Bit_Slice1_out1_3 = Bit_Slice4_out1_2[1];



  assign Bit_Slice_out1_3 = Bit_Slice4_out1_2[0];



  assign Start_out1 = 8'sb00011010;



  assign Logical_Operator4_out1_2 = Bit_Slice2_out1_3 | Bit_Slice1_out1_3;



  assign Start_1_out1 = 8'sb00011001;



  assign Switch_out1_1 = (Bit_Slice_out1_3 == 1'b0 ? Start_out1 :
              Start_1_out1);



  assign Start_2_out1 = 8'sb00011000;



  assign Start_3_out1 = 8'sb00010111;



  assign Logical_Operator1_out1_3 = Logical_Operator3_out1_2 | Logical_Operator_out1_3;



  assign Switch2_out1 = (Bit_Slice2_out1_3 == 1'b0 ? Start_2_out1 :
              Start_3_out1);



  assign Switch1_out1_1 = (Logical_Operator4_out1_2 == 1'b0 ? Switch_out1_1 :
              Switch2_out1);



  assign Start_4_out1 = 8'sb00010110;



  assign Start_5_out1 = 8'sb00010101;



  assign Switch5_out1 = (Bit_Slice5_out1_3 == 1'b0 ? Start_4_out1 :
              Start_5_out1);



  assign Start_6_out1 = 8'sb00010100;



  assign Start_7_out1 = 8'sb00010011;



  assign Switch7_out1 = (Bit_Slice7_out1_2 == 1'b0 ? Start_6_out1 :
              Start_7_out1);



  assign Logical_Operator6_out1_1 = Logical_Operator1_out1_2 | Logical_Operator5_out1_1;



  assign Switch6_out1 = (Logical_Operator3_out1_2 == 1'b0 ? Switch5_out1 :
              Switch7_out1);



  assign Switch4_out1 = (Logical_Operator1_out1_3 == 1'b0 ? Switch1_out1_1 :
              Switch6_out1);



  assign Start_out1_1 = 8'sb00010010;



  assign Start_1_out1_1 = 8'sb00010001;



  assign Switch_out1_2 = (Bit_Slice_out1_2 == 1'b0 ? Start_out1_1 :
              Start_1_out1_1);



  assign Start_2_out1_1 = 8'sb00010000;



  assign Start_3_out1_1 = 8'sb00001111;



  assign Switch2_out1_1 = (Bit_Slice2_out1_2 == 1'b0 ? Start_2_out1_1 :
              Start_3_out1_1);



  assign Switch1_out1_2 = (Logical_Operator4_out1_1 == 1'b0 ? Switch_out1_2 :
              Switch2_out1_1);



  assign Start_4_out1_1 = 8'sb00001110;



  assign Start_5_out1_1 = 8'sb00001101;



  assign Switch5_out1_1 = (Bit_Slice5_out1_2 == 1'b0 ? Start_4_out1_1 :
              Start_5_out1_1);



  assign Start_6_out1_1 = 8'sb00001100;



  assign Start_7_out1_1 = 8'sb00001011;



  assign Switch7_out1_1 = (Bit_Slice7_out1_1 == 1'b0 ? Start_6_out1_1 :
              Start_7_out1_1);



  assign Switch6_out1_1 = (Logical_Operator3_out1_1 == 1'b0 ? Switch5_out1_1 :
              Switch7_out1_1);



  assign Logical_Operator2_out1_2 = Logical_Operator1_out1 | Logical_Operator6_out1;



  assign Switch4_out1_1 = (Logical_Operator1_out1_2 == 1'b0 ? Switch1_out1_2 :
              Switch6_out1_1);



  assign Switch33_out1 = (Logical_Operator6_out1_1 == 1'b0 ? Switch4_out1 :
              Switch4_out1_1);



  assign Start_out1_2 = 8'sb00001010;



  assign Start_1_out1_2 = 8'sb00001001;



  assign Switch_out1_3 = (Bit_Slice_out1_1 == 1'b0 ? Start_out1_2 :
              Start_1_out1_2);



  assign Start_2_out1_2 = 8'sb00001000;



  assign Start_3_out1_2 = 8'sb00000111;



  assign Switch2_out1_2 = (Bit_Slice2_out1_1 == 1'b0 ? Start_2_out1_2 :
              Start_3_out1_2);



  assign Switch1_out1_3 = (Logical_Operator4_out1 == 1'b0 ? Switch_out1_3 :
              Switch2_out1_2);



  assign Start_4_out1_2 = 8'sb00000110;



  assign Start_5_out1_2 = 8'sb00000101;



  assign Switch5_out1_2 = (Bit_Slice5_out1_1 == 1'b0 ? Start_4_out1_2 :
              Start_5_out1_2);



  assign Start_6_out1_2 = 8'sb00000100;



  assign Start_7_out1_2 = 8'sb00000011;



  assign Switch7_out1_2 = (Bit_Slice7_out1 == 1'b0 ? Start_6_out1_2 :
              Start_7_out1_2);



  assign Switch6_out1_2 = (Logical_Operator3_out1 == 1'b0 ? Switch5_out1_2 :
              Switch7_out1_2);



  assign Switch4_out1_2 = (Logical_Operator1_out1_1 == 1'b0 ? Switch1_out1_3 :
              Switch6_out1_2);



  assign alpha24_out1 = 8'sb00000010;



  assign alpha25_out1 = 8'sb00000001;



  assign Switch7_out1_3 = (Bit_Slice3_out1 == 1'b0 ? alpha24_out1 :
              alpha25_out1);



  assign alpha26_out1 = 8'sb00000000;



  assign Switch1_out1_4 = (Bit_Slice5_out1 == 1'b0 ? Switch7_out1_3 :
              alpha26_out1);



  assign Switch2_out1_3 = (Logical_Operator1_out1 == 1'b0 ? Switch4_out1_2 :
              Switch1_out1_4);



  assign Switch34_out1 = (Logical_Operator2_out1_2 == 1'b0 ? Switch33_out1 :
              Switch2_out1_3);



  assign bitsll_w_abs_j_zerosig = 8'sb00000000;



  assign bitsll_w_abs_j_selsig = (Switch34_out1 >= bitsll_w_abs_j_zerosig ? Switch34_out1 :
              bitsll_w_abs_j_zerosig);



  assign dynamic_shift_zerosig = 8'sb00000000;



  assign dynamic_shift_selsig = (bitsll_w_abs_j_selsig >= dynamic_shift_zerosig ? bitsll_w_abs_j_selsig :
              dynamic_shift_zerosig);



  assign bitsll_w_abs_j_out1 = if_sign_1_out1 <<< dynamic_shift_selsig;



  assign bitsra_w_abs_1_out1 = if_sign_1_out1 >>> 8'd1;



  assign alpha1_out1_1 = 30'sb000010000000000000000000000000;



  assign if_w_abs_2_1_out1 = (w_abs_2_out1 == 1'b0 ? bitsll_w_abs_j_out1 :
              bitsra_w_abs_1_out1);



  assign BitSlice1_out1 = if_w_abs_2_1_out1[25:0];



  assign reinterpretcast_bitsliceget_tm_out1 = BitSlice1_out1;



  assign bitsra_w_cfType_Log2NumberOfI_out1 = if_w_hat_0_75_1_out1_9 >>> 8'd13;



  assign alpha1_tmp1_out1 = alpha1_out1_1 - bitsra_w_cfType_Log2NumberOfI_out1;



  assign BitSlice2_out1 = alpha1_tmp1_out1[25:0];



  assign reinterpretcast_bitsliceget_tm_out1_1 = BitSlice2_out1;



  assign tmp_m1_tmp_m2_mul_temp = reinterpretcast_bitsliceget_tm_out1 * reinterpretcast_bitsliceget_tm_out1_1;
  assign tmp_m1_tmp_m2_out1 = tmp_m1_tmp_m2_mul_temp[51:25];



  assign Log4rt10E_out1 = 27'sb100100001101001000010011101;



  assign alphaLog4rt10E_out1 = 27'sb011011110010110111101100011;



  assign cfType_Log2NumberOfIterations_out1 = 8'sb00001100;



  assign C_out1_3 = 8'sb11111111;



  assign if_w_abs_2_out1 = (w_abs_2_out1 == 1'b0 ? Switch34_out1 :
              C_out1_3);



  assign cfType_Log2NumberOfIterations_out1_1 = cfType_Log2NumberOfIterations_out1 + if_w_abs_2_out1;



  assign bitsra_appx_shift_zerosig = 8'sb00000000;



  assign bitsra_appx_shift_selsig = (cfType_Log2NumberOfIterations_out1_1 >= bitsra_appx_shift_zerosig ? cfType_Log2NumberOfIterations_out1_1 :
              bitsra_appx_shift_zerosig);



  assign if_sign_1_out1_1 = (BitSlice_out1_11 == 1'b0 ? Log4rt10E_out1 :
              alphaLog4rt10E_out1);



  assign tmp3_Log4rt10E_cast = {1'b0, tmp_m1_tmp_m2_out1};
  assign tmp3_Log4rt10E_mul_temp = tmp3_Log4rt10E_cast * if_sign_1_out1_1;
  assign tmp3_Log4rt10E_cast_1 = tmp3_Log4rt10E_mul_temp[53:0];
  assign tmp3_Log4rt10E_out1 = tmp3_Log4rt10E_cast_1[52:3];



  assign dynamic_shift_zerosig_1 = 8'sb00000000;



  assign dynamic_shift_selsig_1 = (bitsra_appx_shift_selsig >= dynamic_shift_zerosig_1 ? bitsra_appx_shift_selsig :
              dynamic_shift_zerosig_1);



  assign bitsra_appx_shift_out1 = tmp3_Log4rt10E_out1 >>> dynamic_shift_selsig_1;



  assign L_tmp4_out1 = reinterpretcast_bitconcat_L_f_out1 + bitsra_appx_shift_out1;



  assign if_w_0_out1 = (w_0_out1 == 1'b0 ? reinterpretcast_bitconcat_L_f_out1 :
              L_tmp4_out1);



  assign BitSlice_out1_12 = if_w_0_out1[49];



  assign bitget_L_L_WordLength_0_out1 = BitSlice_out1_12 == 1'b0;



  assign alpha1_out1_2 = 8'sb11111111;



  assign alpha1_out1_3 = 8'sb00000000;



  assign if_bitget_L_L_WordLength_0_out1 = (bitget_L_L_WordLength_0_out1 == 1'b0 ? alpha1_out1_2 :
              alpha1_out1_3);



  assign Constant2_out1 = 58'sh0009A209A84FBD0;



  assign Switch_out1_4 = (Compare_To_Constant_out1 == 1'b0 ? Switch1_out1 :
              Constant2_out1);



  assign Bit_Concat1_out1_2 = {if_bitget_L_L_WordLength_0_out1, if_w_0_out1};



  assign reinterpretcast_bitconcat_fi_0_out1 = Bit_Concat1_out1_2;



  assign exp_tmp_L_out1 = Switch_out1_4 - reinterpretcast_bitconcat_fi_0_out1;



  assign BitSlice_out1_13 = exp_tmp_L_out1[57];



  assign C4_out1 = 1'b1;



  assign if_aExponent_0_2_out1 = (alphaaExponent_0_aMantissa_out1 == 1'b0 ? aSign :
              C4_out1);



  assign if_aExponent_cfType_Exponent_2_out1 = (alphaaExponent_cfType_Exponent_out1_1 == 1'b0 ? BitSlice_out1_13 :
              if_aExponent_0_2_out1);



  assign Switch1_out1_5 = (Constant8_out1 == 1'b0 ? Constant1_out1 :
              if_aExponent_cfType_Exponent_2_out1);



  assign Constant3_out1_1 = 8'b00000000;



  assign Unary_Minus_cast = {exp_tmp_L_out1[57], exp_tmp_L_out1};
  assign Unary_Minus_cast_1 =  - (Unary_Minus_cast);
  assign Unary_Minus_out1 = Unary_Minus_cast_1[57:0];



  assign Switch_out1_5 = (BitSlice_out1_13 == 1'b0 ? exp_tmp_L_out1 :
              Unary_Minus_out1);



  assign BitSlice1_out1_1 = Switch_out1_5[56:0];



  assign Bit_Slice9_out1 = BitSlice1_out1_1[56];



  assign Bit_Slice8_out1 = BitSlice1_out1_1[55];



  assign Logical_Operator3_out1_3 = Bit_Slice9_out1 | Bit_Slice8_out1;



  assign Bit_Slice7_out1_3 = BitSlice1_out1_1[54:47];



  assign Bit_Slice7_out1_4 = Bit_Slice7_out1_3[7];



  assign Bit_Slice6_out1_4 = Bit_Slice7_out1_3[6];



  assign Logical_Operator3_out1_4 = Bit_Slice7_out1_4 | Bit_Slice6_out1_4;



  assign Bit_Slice5_out1_4 = Bit_Slice7_out1_3[5];



  assign Bit_Slice3_out1_4 = Bit_Slice7_out1_3[4];



  assign Logical_Operator_out1_4 = Bit_Slice5_out1_4 | Bit_Slice3_out1_4;



  assign Logical_Operator1_out1_4 = Logical_Operator3_out1_4 | Logical_Operator_out1_4;



  assign Bit_Slice2_out1_4 = Bit_Slice7_out1_3[3];



  assign Bit_Slice1_out1_4 = Bit_Slice7_out1_3[2];



  assign Logical_Operator4_out1_3 = Bit_Slice2_out1_4 | Bit_Slice1_out1_4;



  assign Bit_Slice_out1_4 = Bit_Slice7_out1_3[1];



  assign Bit_Slice4_out1_3 = Bit_Slice7_out1_3[0];



  assign Logical_Operator2_out1_3 = Bit_Slice_out1_4 | Bit_Slice4_out1_3;



  assign Logical_Operator5_out1_2 = Logical_Operator4_out1_3 | Logical_Operator2_out1_3;



  assign Logical_Operator6_out1_2 = Logical_Operator1_out1_4 | Logical_Operator5_out1_2;



  assign Logical_Operator4_out1_4 = Logical_Operator3_out1_3 | Logical_Operator6_out1_2;



  assign Bit_Slice6_out1_5 = BitSlice1_out1_1[46:39];



  assign Bit_Slice7_out1_5 = Bit_Slice6_out1_5[7];



  assign Bit_Slice6_out1_6 = Bit_Slice6_out1_5[6];



  assign Logical_Operator3_out1_5 = Bit_Slice7_out1_5 | Bit_Slice6_out1_6;



  assign Bit_Slice5_out1_5 = Bit_Slice6_out1_5[5];



  assign Bit_Slice3_out1_5 = Bit_Slice6_out1_5[4];



  assign Logical_Operator_out1_5 = Bit_Slice5_out1_5 | Bit_Slice3_out1_5;



  assign Logical_Operator1_out1_5 = Logical_Operator3_out1_5 | Logical_Operator_out1_5;



  assign Bit_Slice2_out1_5 = Bit_Slice6_out1_5[3];



  assign Bit_Slice1_out1_5 = Bit_Slice6_out1_5[2];



  assign Logical_Operator4_out1_5 = Bit_Slice2_out1_5 | Bit_Slice1_out1_5;



  assign Bit_Slice_out1_5 = Bit_Slice6_out1_5[1];



  assign Bit_Slice4_out1_4 = Bit_Slice6_out1_5[0];



  assign Logical_Operator2_out1_4 = Bit_Slice_out1_5 | Bit_Slice4_out1_4;



  assign Logical_Operator5_out1_3 = Logical_Operator4_out1_5 | Logical_Operator2_out1_4;



  assign Logical_Operator6_out1_3 = Logical_Operator1_out1_5 | Logical_Operator5_out1_3;



  assign Bit_Slice5_out1_6 = BitSlice1_out1_1[38:31];



  assign Bit_Slice7_out1_6 = Bit_Slice5_out1_6[7];



  assign Bit_Slice6_out1_7 = Bit_Slice5_out1_6[6];



  assign Logical_Operator3_out1_6 = Bit_Slice7_out1_6 | Bit_Slice6_out1_7;



  assign Bit_Slice5_out1_7 = Bit_Slice5_out1_6[5];



  assign Bit_Slice3_out1_6 = Bit_Slice5_out1_6[4];



  assign Logical_Operator_out1_6 = Bit_Slice5_out1_7 | Bit_Slice3_out1_6;



  assign Logical_Operator1_out1_6 = Logical_Operator3_out1_6 | Logical_Operator_out1_6;



  assign Bit_Slice2_out1_6 = Bit_Slice5_out1_6[3];



  assign Bit_Slice1_out1_6 = Bit_Slice5_out1_6[2];



  assign Logical_Operator4_out1_6 = Bit_Slice2_out1_6 | Bit_Slice1_out1_6;



  assign Bit_Slice_out1_6 = Bit_Slice5_out1_6[1];



  assign Bit_Slice4_out1_5 = Bit_Slice5_out1_6[0];



  assign Logical_Operator2_out1_5 = Bit_Slice_out1_6 | Bit_Slice4_out1_5;



  assign Logical_Operator5_out1_4 = Logical_Operator4_out1_6 | Logical_Operator2_out1_5;



  assign Logical_Operator6_out1_4 = Logical_Operator1_out1_6 | Logical_Operator5_out1_4;



  assign Logical_Operator1_out1_7 = Logical_Operator6_out1_3 | Logical_Operator6_out1_4;



  assign Bit_Slice3_out1_7 = BitSlice1_out1_1[30:23];



  assign Bit_Slice7_out1_7 = Bit_Slice3_out1_7[7];



  assign Bit_Slice6_out1_8 = Bit_Slice3_out1_7[6];



  assign Logical_Operator3_out1_7 = Bit_Slice7_out1_7 | Bit_Slice6_out1_8;



  assign Bit_Slice5_out1_8 = Bit_Slice3_out1_7[5];



  assign Bit_Slice3_out1_8 = Bit_Slice3_out1_7[4];



  assign Logical_Operator_out1_7 = Bit_Slice5_out1_8 | Bit_Slice3_out1_8;



  assign Logical_Operator1_out1_8 = Logical_Operator3_out1_7 | Logical_Operator_out1_7;



  assign Bit_Slice2_out1_7 = Bit_Slice3_out1_7[3];



  assign Bit_Slice1_out1_7 = Bit_Slice3_out1_7[2];



  assign Logical_Operator4_out1_7 = Bit_Slice2_out1_7 | Bit_Slice1_out1_7;



  assign Bit_Slice_out1_7 = Bit_Slice3_out1_7[1];



  assign Bit_Slice4_out1_6 = Bit_Slice3_out1_7[0];



  assign Logical_Operator2_out1_6 = Bit_Slice_out1_7 | Bit_Slice4_out1_6;



  assign Logical_Operator5_out1_5 = Logical_Operator4_out1_7 | Logical_Operator2_out1_6;



  assign Logical_Operator6_out1_5 = Logical_Operator1_out1_8 | Logical_Operator5_out1_5;



  assign Bit_Slice2_out1_8 = BitSlice1_out1_1[22:15];



  assign Bit_Slice7_out1_8 = Bit_Slice2_out1_8[7];



  assign Bit_Slice6_out1_9 = Bit_Slice2_out1_8[6];



  assign Logical_Operator3_out1_8 = Bit_Slice7_out1_8 | Bit_Slice6_out1_9;



  assign Bit_Slice5_out1_9 = Bit_Slice2_out1_8[5];



  assign Bit_Slice3_out1_9 = Bit_Slice2_out1_8[4];



  assign Logical_Operator_out1_8 = Bit_Slice5_out1_9 | Bit_Slice3_out1_9;



  assign Logical_Operator1_out1_9 = Logical_Operator3_out1_8 | Logical_Operator_out1_8;



  assign Bit_Slice2_out1_9 = Bit_Slice2_out1_8[3];



  assign Bit_Slice1_out1_8 = Bit_Slice2_out1_8[2];



  assign Logical_Operator4_out1_8 = Bit_Slice2_out1_9 | Bit_Slice1_out1_8;



  assign Bit_Slice_out1_8 = Bit_Slice2_out1_8[1];



  assign Bit_Slice4_out1_7 = Bit_Slice2_out1_8[0];



  assign Logical_Operator2_out1_7 = Bit_Slice_out1_8 | Bit_Slice4_out1_7;



  assign Logical_Operator5_out1_6 = Logical_Operator4_out1_8 | Logical_Operator2_out1_7;



  assign Logical_Operator6_out1_6 = Logical_Operator1_out1_9 | Logical_Operator5_out1_6;



  assign Bit_Slice1_out1_9 = BitSlice1_out1_1[14:7];



  assign Bit_Slice7_out1_9 = Bit_Slice1_out1_9[7];



  assign Bit_Slice6_out1_10 = Bit_Slice1_out1_9[6];



  assign Logical_Operator3_out1_9 = Bit_Slice7_out1_9 | Bit_Slice6_out1_10;



  assign Bit_Slice5_out1_10 = Bit_Slice1_out1_9[5];



  assign Bit_Slice3_out1_10 = Bit_Slice1_out1_9[4];



  assign Logical_Operator_out1_9 = Bit_Slice5_out1_10 | Bit_Slice3_out1_10;



  assign Logical_Operator1_out1_10 = Logical_Operator3_out1_9 | Logical_Operator_out1_9;



  assign Bit_Slice2_out1_10 = Bit_Slice1_out1_9[3];



  assign Bit_Slice1_out1_10 = Bit_Slice1_out1_9[2];



  assign Logical_Operator4_out1_9 = Bit_Slice2_out1_10 | Bit_Slice1_out1_10;



  assign Bit_Slice_out1_9 = Bit_Slice1_out1_9[1];



  assign Bit_Slice4_out1_8 = Bit_Slice1_out1_9[0];



  assign Logical_Operator2_out1_8 = Bit_Slice_out1_9 | Bit_Slice4_out1_8;



  assign Logical_Operator5_out1_7 = Logical_Operator4_out1_9 | Logical_Operator2_out1_8;



  assign Bit_Slice4_out1_9 = BitSlice1_out1_1[6:0];



  assign Bit_Slice7_out1_10 = Bit_Slice4_out1_9[6];



  assign Bit_Slice6_out1_11 = Bit_Slice4_out1_9[5];



  assign Logical_Operator3_out1_10 = Bit_Slice7_out1_10 | Bit_Slice6_out1_11;



  assign Bit_Slice5_out1_11 = Bit_Slice4_out1_9[4];



  assign Bit_Slice3_out1_11 = Bit_Slice4_out1_9[3];



  assign Logical_Operator_out1_10 = Bit_Slice5_out1_11 | Bit_Slice3_out1_11;



  assign Bit_Slice2_out1_11 = Bit_Slice4_out1_9[2];



  assign Bit_Slice1_out1_11 = Bit_Slice4_out1_9[1];



  assign Bit_Slice_out1_10 = Bit_Slice4_out1_9[0];



  assign Start_out1_3 = 8'sb00111001;



  assign Logical_Operator4_out1_10 = Bit_Slice2_out1_11 | Bit_Slice1_out1_11;



  assign Start_1_out1_3 = 8'sb00111000;



  assign Switch_out1_6 = (Bit_Slice_out1_10 == 1'b0 ? Start_out1_3 :
              Start_1_out1_3);



  assign Start_2_out1_3 = 8'sb00110111;



  assign Start_3_out1_3 = 8'sb00110110;



  assign Logical_Operator1_out1_11 = Logical_Operator3_out1_10 | Logical_Operator_out1_10;



  assign Switch2_out1_4 = (Bit_Slice2_out1_11 == 1'b0 ? Start_2_out1_3 :
              Start_3_out1_3);



  assign Switch1_out1_6 = (Logical_Operator4_out1_10 == 1'b0 ? Switch_out1_6 :
              Switch2_out1_4);



  assign Start_4_out1_3 = 8'sb00110101;



  assign Start_5_out1_3 = 8'sb00110100;



  assign Switch5_out1_3 = (Bit_Slice5_out1_11 == 1'b0 ? Start_4_out1_3 :
              Start_5_out1_3);



  assign Start_6_out1_3 = 8'sb00110011;



  assign Start_7_out1_3 = 8'sb00110010;



  assign Switch7_out1_4 = (Bit_Slice7_out1_10 == 1'b0 ? Start_6_out1_3 :
              Start_7_out1_3);



  assign Logical_Operator6_out1_7 = Logical_Operator1_out1_10 | Logical_Operator5_out1_7;



  assign Switch6_out1_3 = (Logical_Operator3_out1_10 == 1'b0 ? Switch5_out1_3 :
              Switch7_out1_4);



  assign Switch4_out1_3 = (Logical_Operator1_out1_11 == 1'b0 ? Switch1_out1_6 :
              Switch6_out1_3);



  assign Start_out1_4 = 8'sb00110001;



  assign Start_1_out1_4 = 8'sb00110000;



  assign Switch_out1_7 = (Bit_Slice_out1_9 == 1'b0 ? Start_out1_4 :
              Start_1_out1_4);



  assign Start_2_out1_4 = 8'sb00101111;



  assign Start_3_out1_4 = 8'sb00101110;



  assign Switch2_out1_5 = (Bit_Slice2_out1_10 == 1'b0 ? Start_2_out1_4 :
              Start_3_out1_4);



  assign Switch1_out1_7 = (Logical_Operator4_out1_9 == 1'b0 ? Switch_out1_7 :
              Switch2_out1_5);



  assign Start_4_out1_4 = 8'sb00101101;



  assign Start_5_out1_4 = 8'sb00101100;



  assign Switch5_out1_4 = (Bit_Slice5_out1_10 == 1'b0 ? Start_4_out1_4 :
              Start_5_out1_4);



  assign Start_6_out1_4 = 8'sb00101011;



  assign Start_7_out1_4 = 8'sb00101010;



  assign Switch7_out1_5 = (Bit_Slice7_out1_9 == 1'b0 ? Start_6_out1_4 :
              Start_7_out1_4);



  assign Switch6_out1_4 = (Logical_Operator3_out1_9 == 1'b0 ? Switch5_out1_4 :
              Switch7_out1_5);



  assign Logical_Operator2_out1_9 = Logical_Operator6_out1_5 | Logical_Operator6_out1_6;



  assign Switch4_out1_4 = (Logical_Operator1_out1_10 == 1'b0 ? Switch1_out1_7 :
              Switch6_out1_4);



  assign Switch33_out1_1 = (Logical_Operator6_out1_7 == 1'b0 ? Switch4_out1_3 :
              Switch4_out1_4);



  assign Start_out1_5 = 8'sb00101001;



  assign Start_1_out1_5 = 8'sb00101000;



  assign Switch_out1_8 = (Bit_Slice_out1_8 == 1'b0 ? Start_out1_5 :
              Start_1_out1_5);



  assign Start_2_out1_5 = 8'sb00100111;



  assign Start_3_out1_5 = 8'sb00100110;



  assign Switch2_out1_6 = (Bit_Slice2_out1_9 == 1'b0 ? Start_2_out1_5 :
              Start_3_out1_5);



  assign Switch1_out1_8 = (Logical_Operator4_out1_8 == 1'b0 ? Switch_out1_8 :
              Switch2_out1_6);



  assign Start_4_out1_5 = 8'sb00100101;



  assign Start_5_out1_5 = 8'sb00100100;



  assign Switch5_out1_5 = (Bit_Slice5_out1_9 == 1'b0 ? Start_4_out1_5 :
              Start_5_out1_5);



  assign Start_6_out1_5 = 8'sb00100011;



  assign Start_7_out1_5 = 8'sb00100010;



  assign Switch7_out1_6 = (Bit_Slice7_out1_8 == 1'b0 ? Start_6_out1_5 :
              Start_7_out1_5);



  assign Switch6_out1_5 = (Logical_Operator3_out1_8 == 1'b0 ? Switch5_out1_5 :
              Switch7_out1_6);



  assign Switch4_out1_5 = (Logical_Operator1_out1_9 == 1'b0 ? Switch1_out1_8 :
              Switch6_out1_5);



  assign Start_out1_6 = 8'sb00100001;



  assign Start_1_out1_6 = 8'sb00100000;



  assign Switch_out1_9 = (Bit_Slice_out1_7 == 1'b0 ? Start_out1_6 :
              Start_1_out1_6);



  assign Start_2_out1_6 = 8'sb00011111;



  assign Start_3_out1_6 = 8'sb00011110;



  assign Switch2_out1_7 = (Bit_Slice2_out1_7 == 1'b0 ? Start_2_out1_6 :
              Start_3_out1_6);



  assign Switch1_out1_9 = (Logical_Operator4_out1_7 == 1'b0 ? Switch_out1_9 :
              Switch2_out1_7);



  assign Start_4_out1_6 = 8'sb00011101;



  assign Start_5_out1_6 = 8'sb00011100;



  assign Switch5_out1_6 = (Bit_Slice5_out1_8 == 1'b0 ? Start_4_out1_6 :
              Start_5_out1_6);



  assign Start_6_out1_6 = 8'sb00011011;



  assign Start_7_out1_6 = 8'sb00011010;



  assign Switch7_out1_7 = (Bit_Slice7_out1_7 == 1'b0 ? Start_6_out1_6 :
              Start_7_out1_6);



  assign Switch6_out1_6 = (Logical_Operator3_out1_7 == 1'b0 ? Switch5_out1_6 :
              Switch7_out1_7);



  assign Switch4_out1_6 = (Logical_Operator1_out1_8 == 1'b0 ? Switch1_out1_9 :
              Switch6_out1_6);



  assign Logical_Operator5_out1_8 = Logical_Operator4_out1_4 | Logical_Operator1_out1_7;



  assign Switch2_out1_8 = (Logical_Operator6_out1_5 == 1'b0 ? Switch4_out1_5 :
              Switch4_out1_6);



  assign Switch34_out1_1 = (Logical_Operator2_out1_9 == 1'b0 ? Switch33_out1_1 :
              Switch2_out1_8);



  assign Start_out1_7 = 8'sb00011001;



  assign Start_1_out1_7 = 8'sb00011000;



  assign Switch_out1_10 = (Bit_Slice_out1_6 == 1'b0 ? Start_out1_7 :
              Start_1_out1_7);



  assign Start_2_out1_7 = 8'sb00010111;



  assign Start_3_out1_7 = 8'sb00010110;



  assign Switch2_out1_9 = (Bit_Slice2_out1_6 == 1'b0 ? Start_2_out1_7 :
              Start_3_out1_7);



  assign Switch1_out1_10 = (Logical_Operator4_out1_6 == 1'b0 ? Switch_out1_10 :
              Switch2_out1_9);



  assign Start_4_out1_7 = 8'sb00010101;



  assign Start_5_out1_7 = 8'sb00010100;



  assign Switch5_out1_7 = (Bit_Slice5_out1_7 == 1'b0 ? Start_4_out1_7 :
              Start_5_out1_7);



  assign Start_6_out1_7 = 8'sb00010011;



  assign Start_7_out1_7 = 8'sb00010010;



  assign Switch7_out1_8 = (Bit_Slice7_out1_6 == 1'b0 ? Start_6_out1_7 :
              Start_7_out1_7);



  assign Switch6_out1_7 = (Logical_Operator3_out1_6 == 1'b0 ? Switch5_out1_7 :
              Switch7_out1_8);



  assign Switch4_out1_7 = (Logical_Operator1_out1_6 == 1'b0 ? Switch1_out1_10 :
              Switch6_out1_7);



  assign Start_out1_8 = 8'sb00010001;



  assign Start_1_out1_8 = 8'sb00010000;



  assign Switch_out1_11 = (Bit_Slice_out1_5 == 1'b0 ? Start_out1_8 :
              Start_1_out1_8);



  assign Start_2_out1_8 = 8'sb00001111;



  assign Start_3_out1_8 = 8'sb00001110;



  assign Switch2_out1_10 = (Bit_Slice2_out1_5 == 1'b0 ? Start_2_out1_8 :
              Start_3_out1_8);



  assign Switch1_out1_11 = (Logical_Operator4_out1_5 == 1'b0 ? Switch_out1_11 :
              Switch2_out1_10);



  assign Start_4_out1_8 = 8'sb00001101;



  assign Start_5_out1_8 = 8'sb00001100;



  assign Switch5_out1_8 = (Bit_Slice5_out1_5 == 1'b0 ? Start_4_out1_8 :
              Start_5_out1_8);



  assign Start_6_out1_8 = 8'sb00001011;



  assign Start_7_out1_8 = 8'sb00001010;



  assign Switch7_out1_9 = (Bit_Slice7_out1_5 == 1'b0 ? Start_6_out1_8 :
              Start_7_out1_8);



  assign Switch6_out1_8 = (Logical_Operator3_out1_5 == 1'b0 ? Switch5_out1_8 :
              Switch7_out1_9);



  assign Switch4_out1_8 = (Logical_Operator1_out1_5 == 1'b0 ? Switch1_out1_11 :
              Switch6_out1_8);



  assign Switch1_out1_12 = (Logical_Operator6_out1_3 == 1'b0 ? Switch4_out1_7 :
              Switch4_out1_8);



  assign Start_out1_9 = 8'sb00001001;



  assign Start_1_out1_9 = 8'sb00001000;



  assign Switch_out1_12 = (Bit_Slice_out1_4 == 1'b0 ? Start_out1_9 :
              Start_1_out1_9);



  assign Start_2_out1_9 = 8'sb00000111;



  assign Start_3_out1_9 = 8'sb00000110;



  assign Switch2_out1_11 = (Bit_Slice2_out1_4 == 1'b0 ? Start_2_out1_9 :
              Start_3_out1_9);



  assign Switch1_out1_13 = (Logical_Operator4_out1_3 == 1'b0 ? Switch_out1_12 :
              Switch2_out1_11);



  assign Start_4_out1_9 = 8'sb00000101;



  assign Start_5_out1_9 = 8'sb00000100;



  assign Switch5_out1_9 = (Bit_Slice5_out1_4 == 1'b0 ? Start_4_out1_9 :
              Start_5_out1_9);



  assign Start_6_out1_9 = 8'sb00000011;



  assign Start_7_out1_9 = 8'sb00000010;



  assign Switch7_out1_10 = (Bit_Slice7_out1_4 == 1'b0 ? Start_6_out1_9 :
              Start_7_out1_9);



  assign Switch6_out1_9 = (Logical_Operator3_out1_4 == 1'b0 ? Switch5_out1_9 :
              Switch7_out1_10);



  assign Switch4_out1_9 = (Logical_Operator1_out1_4 == 1'b0 ? Switch1_out1_13 :
              Switch6_out1_9);



  assign alpha56_out1 = 8'sb00000001;



  assign alpha57_out1 = 8'sb00000000;



  assign Switch7_out1_11 = (Bit_Slice9_out1 == 1'b0 ? alpha56_out1 :
              alpha57_out1);



  assign Switch3_out1 = (Logical_Operator3_out1_3 == 1'b0 ? Switch4_out1_9 :
              Switch7_out1_11);



  assign Switch4_out1_10 = (Logical_Operator4_out1_4 == 1'b0 ? Switch1_out1_12 :
              Switch3_out1);



  assign Switch5_out1_10 = (Logical_Operator5_out1_8 == 1'b0 ? Switch34_out1_1 :
              Switch4_out1_10);



  assign DTC_out1_2 = Switch5_out1_10;



  assign alpha0_out1_2 = 1'b0;



  assign bitsll_Sum_tmp1_out1 = BitSlice1_out1_1 <<< DTC_out1_2;



  assign BitSlice2_out1_1 = bitsll_Sum_tmp1_out1[55:32];



  assign Bit_Concat_out1_12 = {alpha0_out1_2, BitSlice2_out1_1};



  assign BitSlice_out1_14 = Bit_Concat_out1_12[0];



  assign BitSlice1_out1_2 = Bit_Concat_out1_12[1];



  assign alphabitget_Mant_tmp_2_0_out1 = BitSlice1_out1_2 | bitsliceget_mant_norm_mant_no_out1;



  assign alphabitget_Mant_tmp_1_0_out1 = BitSlice_out1_14 & alphabitget_Mant_tmp_2_0_out1;



  assign cast_2_like_Mant_tmp_out1 = 25'b0000000000000000000000010;



  assign Mant_tmp_cast_2_like_Man_1 = {7'b0, Bit_Concat_out1_12};
  assign Mant_tmp_cast_2_like_Man_2 = {7'b0, cast_2_like_Mant_tmp_out1};
  assign Mant_tmp_cast_2_like_Man_add_temp = Mant_tmp_cast_2_like_Man_1 + Mant_tmp_cast_2_like_Man_2;
  assign Mant_tmp_cast_2_like_Man_out1 = Mant_tmp_cast_2_like_Man_add_temp[24:0];



  assign if_bitget_Mant_tmp_1_0_out1 = (alphabitget_Mant_tmp_1_0_out1 == 1'b0 ? Bit_Concat_out1_12 :
              Mant_tmp_cast_2_like_Man_out1);



  assign BitSlice2_out1_2 = if_bitget_Mant_tmp_1_0_out1[24];



  assign Compare_To_Constant_out1_1 = DTC_out1_2 == 8'b00111001;



  assign alpha80_out1 = 8'b10000110;



  assign alpha80_cast_pos_like_exp_out_out1 = alpha80_out1 - DTC_out1_2;



  assign alpha80_1_out1 = 8'b00000000;



  assign Switch1_out1_14 = (Compare_To_Constant_out1_1 == 1'b0 ? alpha80_cast_pos_like_exp_out_out1 :
              alpha80_1_out1);



  assign cast_1_like_Exp_out1 = 8'b00000001;



  assign Exp_cast_1_like_Exp_out1 = Switch1_out1_14 + cast_1_like_Exp_out1;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = (BitSlice2_out1_2 == 1'b0 ? Switch1_out1_14 :
              Exp_cast_1_like_Exp_out1);



  assign C_out1_4 = 8'b11111111;



  assign if_aSign_1_out1 = (aSign == 1'b0 ? aExponent :
              C_out1_4);



  assign C2_out1 = 8'b11111111;



  assign if_aExponent_0_out1 = (alphaaExponent_0_aMantissa_out1 == 1'b0 ? if_aSign_1_out1 :
              C2_out1);



  assign if_aExponent_cfType_Exponent_out1 = (alphaaExponent_cfType_Exponent_out1_1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_out1 :
              if_aExponent_0_out1);



  assign Switch6_out1_10 = (Constant8_out1 == 1'b0 ? Constant3_out1_1 :
              if_aExponent_cfType_Exponent_out1);



  assign Constant2_out1_1 = 23'b00000000000000000000000;



  assign Compare_To_Zero_out1_1 = if_bitget_Mant_tmp_Mant_tmp_Wor_out1 == 8'b00000000;



  assign Logical_Operator_out1_11 = Compare_To_Zero_out1_1 | BitSlice2_out1_2;



  assign BitSlice3_out1 = if_bitget_Mant_tmp_1_0_out1[23:1];



  assign C_out1_5 = 23'b00000000000000000000000;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 = (Logical_Operator_out1_11 == 1'b0 ? BitSlice3_out1 :
              C_out1_5);



  assign C1_out1 = 23'b10000000000000000000000;



  assign if_aSign_1_1_out1 = (aSign == 1'b0 ? Switch_out1 :
              C1_out1);



  assign C3_out1 = 23'b00000000000000000000000;



  assign if_aExponent_0_1_out1 = (alphaaExponent_0_aMantissa_out1 == 1'b0 ? if_aSign_1_1_out1 :
              C3_out1);



  assign if_aExponent_cfType_Exponent_1_out1 = (alphaaExponent_cfType_Exponent_out1_1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 :
              if_aExponent_0_1_out1);



  assign Switch5_out1_11 = (Constant8_out1 == 1'b0 ? Constant2_out1_1 :
              if_aExponent_cfType_Exponent_1_out1);



  // Combine FP sign, exponent, mantissa into 32 bit word
  assign nfp_out_pack = {Switch1_out1_5, Switch6_out1_10, Switch5_out1_11};



  assign nfp_out = nfp_out_pack;

endmodule  // nfp_log10_single

